<?php
// $Id$

/**
 * @file
 * Adds taxonomy terms to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_term_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_form_term':
      $default = isset($form['vid']['#value']) ? variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], 0.5) : 0.5;
      $options = xmlsitemap_priority_options('both');
      $priority = isset($form['tid']['#value']) ? db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_term}
        WHERE tid = %d", $form['tid']['#value'])) : -2.0;
      if ($priority === FALSE) {
        $priority = -2.0;
      }
      xmlsitemap_add_settings_fieldset($form,
        array(
          'buttons' => array('submit', 'delete'),
        )
      );
      $form['xmlsitemap']['xmlsitemap_term_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#default_value' => $priority,
        '#options' => $options,
        '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
      );
      break;
    case 'taxonomy_form_vocabulary':
      xmlsitemap_add_settings_fieldset($form,
        array('buttons' => array('submit', 'delete'))
      );
      $form['xmlsitemap']['xmlsitemap_term_vocabulary_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#default_value' => isset($form['vid']['#value']) ? variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], 0.5) : 0.5,
        '#options' => xmlsitemap_priority_options('exclude'),
        '#description' => t('This will be the default priority of terms in this vocabulary.'),
      );
      break;
  }
}

/**
 * Implementation of hook_taxonomy().
 */

function xmlsitemap_term_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary') {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE vid = %d", $array['vid']);
        variable_del('xmlsitemap_term_vocabulary_priority_'. $array['vid']);
        xmlsitemap_update_sitemap();
        break;
      case 'insert':
      case 'update':
        if (variable_get('xmlsitemap_term_vocabulary_priority_'. $array['vid'], 0.5) != $array['xmlsitemap_term_vocabulary_priority']) {
          variable_set('xmlsitemap_term_vocabulary_priority_'. $array['vid'], $array['xmlsitemap_term_vocabulary_priority']);
          xmlsitemap_update_sitemap();
        }
        break;
    }
  }
  else {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE tid = %d", $array['tid']);
        break;
      case 'insert':
        $row = new stdClass();
        $row->tid = $array['tid'];
        $row->vid = $array['vid'];
        $row->priority_override = $array['xmlsitemap_term_priority'];
        drupal_write_record('xmlsitemap_term', $row);
        break;
      case 'update':
        $update = (db_result(db_query("SELECT tid FROM {xmlsitemap_term} WHERE tid = %d", $array['tid'])) == $array['tid']);
        $row = new stdClass();
        $row->tid = $array['tid'];
        $row->vid = $array['vid'];
        $row->priority_override = $array['xmlsitemap_term_priority'];
        drupal_write_record('xmlsitemap_term', $row, $update ? 'tid' : NULL);
        break;
    }
    xmlsitemap_update_sitemap();
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_term_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Term') .'</dt>'.
    '<dd>'. t('<em>XML Sitemap: Term</em> adds <a href="@terms">taxonomy terms</a> (categories) to the site map. You can change the default priority when you add or edit a vocabulary, and you can override the default priority when you add or edit individual terms.', array('@terms' => url('admin/content/taxonomy'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_term_xmlsitemap_links() {
  $excludes = array();
  $result = db_query("SELECT vid FROM {vocabulary}");
  while ($vocabulary = db_fetch_object($result)) {
    if (variable_get('xmlsitemap_term_vocabulary_priority_'. $vocabulary->vid, 0.5) == -1) {
        $excludes[] = $vocabulary->vid;
    }
  }
  if (empty($excludes)) {
    $excludes = array(0);
  }
  $tid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 3 && $frontpage[0] == 'taxonomy' && $frontpage[1] == 'term' && is_numeric($frontpage[2])) {
    $tid = $frontpage[2];
  }
  elseif (count($frontpage) == 2 && $frontpage[0] == 'forum' && is_numeric($frontpage[1])) {
    $tid = $frontpage[1];
  }
  $columns = 't.tid, t.vid, v.module, xt.priority_override';
  $query_args = array_merge($excludes, array($tid));
  $result = db_query(db_rewrite_sql("SELECT $columns
    FROM {term_data} t
    LEFT JOIN {vocabulary} v ON t.vid = v.vid
    LEFT JOIN {xmlsitemap_term} xt ON t.tid = xt.tid
    WHERE t.vid NOT IN (". db_placeholders($excludes, 'int') .")
      AND xt.priority_override <> -1
      AND t.tid <> %d
    GROUP BY $columns", 't', 'tid'),
    $query_args
  );
  $row = new stdClass();
  $row->module = 'xmlsitemap_term';
  while ($term = db_fetch_object($result)) {
    $stat = db_fetch_object(db_query("SELECT MAX(n.changed) AS changed, MIN(n.changed) AS previously_changed, COUNT(n.nid) AS count
      FROM {node} n
      WHERE n.nid IN (SELECT tn.nid FROM {term_node} tn WHERE tn.tid = %d)",
      $term->tid)
    );
    if (!empty($stat->changed) && !empty($stat->previously_changed) && !empty($stat->count)) {
      if ($stat->changed != $stat->previously_changed) {
        $frequency = ($stat->changed - $stat->previously_changed) / $stat->count;
      }
      else {
        $frequency = (time() - $stat->changed) / $stat->count;
      }
      if ($term->module == 'forum') {
        $row->loc = 'forum/'. $term->tid;
      }
      else {
        $row->loc = taxonomy_term_path($term);
      }
      if ($term->priority_override != -2.0) {
        $priority = $term->priority_override;
      }
      else {
        $priority = variable_get('xmlsitemap_term_vocabulary_priority_'. $term->vid, 0.5);
      }
      $row->lastmod = $stat->changed;
      $row->priority = $priority;
      if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
        drupal_write_record('xmlsitemap', $row);
      }
    }
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
