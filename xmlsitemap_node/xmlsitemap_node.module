<?php
// $Id$

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($a1, $op) {
  $maxcomments = (integer) db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'));
  switch ($op) {
    case 'insert':
    case 'update':
    case 'delete':
    case 'publish':
    case 'unpublish':
      $nid = is_array($a1) ? $a1['nid'] : $a1->nid;
      if ($nid && $maxcomments > 1) {
        $comments = (integer) db_result(db_query('SELECT comment_count
          FROM {node_comment_statistics}
          WHERE nid = %d',
          $nid)
        );
        db_query('UPDATE {xmlsitemap_node}
          SET comment_ratio = %f
          WHERE nid = %d', $comments / $maxcomments,
          $nid
        );
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
    $node = $form['#node'];
    $default = variable_get('xmlsitemap_node_type_priority_'. $node->type, '0.5');
    $disabled = !user_access('administer nodes');
    $options = xmlsitemap_priority_options('both');
    xmlsitemap_add_settings_fieldset($form,
      array(
        'disabled' => $disabled,
        'weight' => 30,
      )
    );
    $form['xmlsitemap']['xmlsitemap_node']['priority_override'] = array(
      '#type' => 'select',
      '#title' => t('Priority'),
      '#default_value' => $node->priority_override,
      '#options' => $options,
      '#disabled' => $disabled,
      '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
    );
  }
  else {
    switch ($form_id) {
      case 'node_type_form':
        if (isset($form['identity']['type'])) {
          $options = xmlsitemap_priority_options('exclude');
          xmlsitemap_add_settings_fieldset($form,
            array('buttons' => array('submit', 'reset'))
          );
          $form['xmlsitemap']['xmlsitemap_node_type_priority'] = array(
            '#type' => 'select',
            '#title' => t('Priority adjustment'),
            '#default_value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5),
            '#options' => $options,
            '#description' => t('This number will be added to the priority of this content type.'),
          );
          $form['xmlsitemap']['xmlsitemap_node_type_include_attachments'] = array(
            '#type' => 'checkbox',
            '#title' => t('Include node attachments in the site map'),
            '#default_value' => variable_get('xmlsitemap_node_type_include_attachments_'. $form['#node_type']->type, variable_get('xmlsitemap_node_include_attachments', FALSE)),
            '#return_value' => 1,
            '#description' => t('This option will be used for content types that are included in the site map; this means it will be not used for content types which have the priority set to @exclude_option.', array('@exclude_option' => $options['-1'])),
          );
        }
        break;
    }
  }
}

/**
 * Implementation of hook_init().
 */
function xmlsitemap_node_init() {
  if (module_exists('xmlsitemap_file')) {
    xmlsitemap_add_admin_message(
      t('The functionallity of %xmlsitemap-file has been incorporated in %xmlsitemap-node. %xmlsitemap-file can be now <a href="@modules-page">disabled</a>.',
        array(
          '%xmlsitemap-file' => t('XML Sitemap: File'),
          '%xmlsitemap-node' => t('XML Sitemap: Node'),
          '@modules-page' => url('admin/build/modules'),
        )), 'warning'
    );
  }
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_type_priority_'. $info->type);
    variable_del('xmlsitemap_node_type_include_attachments_'. $info->type);
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set('xmlsitemap_node_type_priority_'. $info->type, variable_get('xmlsitemap_node_type_priority_'. $info->old_type, 0.5));
    variable_del('xmlsitemap_node_type_priority_'. $info->old_type);
    variable_set('xmlsitemap_node_type_include_attachments_'. $info->type, variable_get('xmlsitemap_node_type_include_attachments_'. $info->old_type, FALSE));
    variable_del('xmlsitemap_node_type_include_attachments_'. $info->old_type);
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  $anonymous = user_load(array('uid' => 0));
  switch ($op) {
    case 'prepare':
      $priority = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_node} WHERE nid = %d",
        $node->nid)
      );
      $node->priority_override = $priority !== FALSE ? $priority : -2.0;
      break;
    case 'insert':
      $row = new stdClass();
      $row->nid = $node->nid;
      $row->changed = $node->changed;
      $row->anonym_access = node_access('view', $node, $anonymous);
      $row->priority_override = $node->priority_override;
      drupal_write_record('xmlsitemap_node', $row);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      if (($result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_node} WHERE nid = %d", $node->nid))) !== FALSE) {
        $row = $result;
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
      }
      else {
        $row = new stdClass();
        $row->nid = $node->nid;
        $row->changed = $node->changed;
      }
      $row->anonym_access = node_access('view', $node, $anonymous);
      $row->priority_override = $node->priority_override;
      drupal_write_record('xmlsitemap_node', $row, $result !== FALSE ? 'nid' : NULL);
      xmlsitemap_update_sitemap();
      break;
    case 'delete':
      db_query("UPDATE {xmlsitemap_node} SET deleted = 1 WHERE nid = %d", $node->nid);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_node_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Node') .'</dt>'.
    '<dd>'. t('It adds nodes to the site map, and optionaly the attachments those nodes. The default priority of a node is determined by a combination of its <a href="@content">content type</a> priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('@content' => url('admin/content/types'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links() {
  static $excludes;
  if (!isset($excludes)) {
    $excludes = array();
    foreach (node_get_types() as $type => $name) {
      if (variable_get("xmlsitemap_node_type_priority_$type", 0.5) == -1.0) {
        $excludes[] = $type;
      }
    }
    if (empty($excludes)) {
      $excludes = array('');
    }
  }
  $columns = 'n.*, xn.previously_changed, xn.anonym_access, xn.priority_override';
  $query = "SELECT $columns
    FROM {node} n
    INNER JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
    WHERE n.status > 0
      AND n.type NOT IN (". db_placeholders($excludes, 'varchar') .")
      AND xn.priority_override <> -1.0
      AND n.nid <> %d
    GROUP BY $columns";
  $nid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 2 && $frontpage[0] == 'node' && is_numeric($frontpage[1])) {
    $nid = $frontpage[1];
  }
  $query_args = array_merge($excludes, array($nid));
  $result = db_query(db_rewrite_sql($query), $query_args);
  $row = new stdClass();
  $row->module = 'xmlsitemap_node';
  while ($node = db_fetch_object($result)) {
    if ($node->anonym_access) {
      $age = time() - $node->changed;
      $interval = $node->changed - $node->previously_changed;
      if ($node->priority_override != -2.0) {
        $priority = $node->priority_override;
      }
      else {
        $priority = variable_get('xmlsitemap_node_type_priority_'. $node->type, 0.5);
      }
      if ($node->promote) {
        $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
      }
      $priority += round($node->comment_ratio * variable_get('xmlsitemap_node_comment_priority', 0.2), 1);
      }
      $priority = min($priority, 1.0);
      $row->loc = 'node/'. $node->nid;
      $row->type = 'node';
      $row->lid = $node->nid;
      $row->lastmod = $node->changed;
      $row->changefreq = max($age,$interval);
      $row->priority = $priority;
      if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
        drupal_write_record('xmlsitemap', $row);
        if (module_exists('upload') && variable_get('xmlsitemap_node_type_include_attachments_'. $node->type, variable_get('xmlsitemap_node_include_attachments', FALSE))) {
          $now = time();
          $attachments_query = db_query("SELECT filepath, timestamp
            FROM {files}
            WHERE fid IN (SELECT fid FROM {upload} WHERE vid = %d AND list = 1)", $node->vid
          );
          while ($attachment = db_fetch_object($attachments_query)) {
            $row->loc = $attachment->filepath;
            $row->type = 'attachment';
            $row->lsid = $attachment->fid;
            $row->changefreq = $now - $attachment->timestamp;
            if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
              drupal_write_record('xmlsitemap', $row);
            }
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_node_xmlsitemap_sitemap_settings_alter(&$form) {
  $form['xmlsitemap_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content settings'),
    '#description' => t('The settings for the content to include in the site map.'),
    '#collapsible' => TRUE,
  );
  $form['xmlsitemap_node']['xmlsitemap_node_include_attachments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include node attachments in the site map'),
    '#default_value' => variable_get('xmlsitemap_node_include_attachments', FALSE),
    '#return_value' => 1,
    '#description' => t('This is the default value used for all the content types for which a value has not been assigned. See the <a href="@content-type-page">content type page</a> to set a value for a specific content type.', array("@content-type-page" => url('admin/content/types'))),
  );
  $form['xmlsitemap_node']['xmlsitemap_node_promote_priority'] = array(
    '#type' => 'select',
    '#title' => t('Promotion adjustment'),
    '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
    '#options' => xmlsitemap_priority_options(),
    '#description' => t('This number will be added to the priority of each post that is promoted to the front page.'),
  );
  $form['xmlsitemap_node']['xmlsitemap_node_comment_priority'] = array(
    '#type' => 'select',
    '#title' => t('Comment ratio weight'),
    '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.2),
    '#options' => xmlsitemap_priority_options(),
    '#description' => t("This number will be multiplied by the ratio of the number of comments on a post to the highest number of comments. This doesn't apply if the maximum number of comments is 1."),
  );
}

/**
 * Implementation of hook_xmlsitemap_update_module_tables_batch_operations().
 */
function xmlsitemap_node_xmlsitemap_update_module_tables_batch_operations() {
  return array(
    '_xmlsitemap_node_module_table_delete_rows',
    '_xmlsitemap_node_module_table_update_rows',
    '_xmlsitemap_node_module_table_add_rows',
  );
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Return the absolute URL of the links added in the site map by
 * xmlsitemap_node.module.
 * @param $type
 *  The type of link associated with the path.
 * @param $path
 *  The relative path of the link being added to the site map.
 * @return
 *   The absolute URL of the path. If there is an alias, it will be used.
 */
function xmlsitemap_node_url($type, $path) {
  switch ($type) {
    case 'attachment':
      $url = file_create_url($path);
      break;
    default:
      $url = url($path, array('absolute' => TRUE));
      break;
  }
  return $url;
}

/*****************************************************************************
 * Private functions - database batch operations.
 ****************************************************************************/

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_add_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(n.nid)
      FROM {node} n
      LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE xn.nid IS NULL')
    );
  }
  if ($context['sandbox']['max']) {
    $result = db_query_range('SELECT n.nid, n.created AS previously_changed, n.changed
      FROM {node} n
      LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE xn.nid IS NULL
        AND n.nid > %d
      ORDER BY n.nid ASC',
      $context['sandbox']['current_node'], 0, 1
    );
    if ($row = db_fetch_object($result)) {
      $anonymous = user_load(array('uid' => 0));
      $node = node_load($row->nid);
      $row->anonym_access = node_access('view', $node, $anonymous);
      drupal_write_record('xmlsitemap_node', $row);
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $row->nid;
      $context['results']['added'] = $context['sandbox']['progress'];
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_delete_rows(&$context) {
  $context['results']['deleted'] = (integer) db_result(db_query('SELECT COUNT(xn.nid)
    FROM {xmlsitemap_node} xn
    LEFT JOIN {node} n ON n.nid = xn.nid
    WHERE n.nid IS NULL')
  );
  db_query('DELETE FROM {xmlsitemap_node} xn
    WHERE xn.nid IN (
      SELECT xn.nid
        FROM {xmlsitemap_node} xn
        LEFT JOIN {node} n ON n.nid = xn.nid
        WHERE n.nid IS NULL
      )'
  );
  $context['finished'] = 1;
}

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_update_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(n.nid)
      FROM {node} n
      INNER JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE n.changed > xn.changed')
    );
  }
  if ($context['sandbox']['max']) {
    $result = db_query_range('SELECT n.nid, xn.changed AS previously_changed, n.changed
      FROM {node} n
      INNER JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE n.nid > %d
        AND n.changed > xn.changed
      ORDER BY n.nid ASC',
      $context['sandbox']['current_node'], 0, 1
    );
    if ($row = db_fetch_object($result)) {
      $anonymous = user_load(array('uid' => 0));
      $node = node_load($row->nid);
      $row->anonym_access = node_access('view', $node, $anonymous);
      drupal_write_record('xmlsitemap_node', $row, 'nid');
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $row->nid;
      $context['results']['update'] = $context['sandbox']['progress'];
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
