<?php
// $Id$

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Module constants.
 ****************************************************************************/

define('XMLSITEMAP_NODE_NODE_TYPE', 0);
define('XMLSITEMAP_NODE_ATTACHMENT_TYPE', 1);

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($a1, $op) {
  $mid = variable_get('xmlsitemap_node_id', 0);
  $anonym = drupal_anonymous_user();
  $excludes = xmlsitemap_node_excludes();
  $maxcomments = (integer) db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'));
  switch ($op) {
    case 'insert':
    case 'update':
    case 'delete':
    case 'publish':
    case 'unpublish':
      $nid = is_array($a1) ? $a1['nid'] : $a1->nid;
      if ($nid && $maxcomments > 1) {
        $comments = (integer) db_result(db_query('SELECT comment_count
          FROM {node_comment_statistics}
          WHERE nid = %d',
          $nid)
        );
        $query = "SELECT * FROM {xmlsitemap} WHERE mid = %d AND type = %d AND tid = %d";
        $link = db_fetch_object(db_query($query, array($mid, XMLSITEMAP_NODE_NODE_TYPE, $nid)));
        $node = node_load($nid);
        if ($link) {
          $update = TRUE;
        }
        else {
          if (!$node) {
            return;
          }
          $link = new stdClass();
          $link->mid = $mid;
          $link->url = "node/$nid";
          $link->type = XMLSITEMAP_NODE_NODE_TYPE;
          $link->tid = $nid;
          $link->language = $node->language;
          $link->changed = $node->changed;
          $link->p1 = $node->type;
          $link->p5 = -20;
          $link->p6 = $node->created;
          _xmlsitemap_node_change_freq($link, $node->created, $node->changed);
          _xmlsitemap_node_priority($link, $node);
        }
        $link->p7 = (integer) round($comments * 10 / $maxcomments, 0);
        if ($node) {
          $link->enabled = (boolean) $node->status && !isset($excludes[$node->type]) && node_access('view', $node, $anonym);
          _xmlsitemap_node_add_node_attachments($mid, $link);
        }
        else {
          $link->enabled = FALSE;
        }
        xmlsitemap_save_link($link, isset($update));
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        $options = xmlsitemap_priority_options('exclude');
        xmlsitemap_add_settings_fieldset($form,
          array('buttons' => array('submit', 'reset'))
        );
        $form['xmlsitemap']['xmlsitemap_node_type_priority'] = array(
          '#type' => 'select',
          '#title' => t('Priority adjustment'),
          '#description' => t('This number will be added to the priority of this content type.'),
          '#default_value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5),
          '#options' => $options,
        );
        $form['xmlsitemap']['xmlsitemap_node_type_include_attachments'] = array(
          '#type' => 'checkbox',
          '#title' => t('Include node attachments in the site map'),
          '#description' => t('The attachments will be included in the site map only when the relative content type is added to the site map.'),
          '#default_value' => variable_get('xmlsitemap_node_type_include_attachments_'. $form['#node_type']->type, variable_get('xmlsitemap_node_include_attachments', FALSE)),
          '#return_value' => 1,
        );
      }
      if (cache_get('xmlsitemap_node_excludes')) {
        cache_clear_all('xmlsitemap_node_excludes', 'cache');
      }
      break;
    default:
      if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
        $node = $form['#node'];
        if (!isset($form['xmlsitemap'])) {
          $form['xmlsitemap'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
            '#access' => user_access('override node priority') || user_access('administer nodes'),
            '#weight' => 30,
          );
        }
        $options = xmlsitemap_priority_options('both');
        $default = variable_get('xmlsitemap_node_type_priority_'. $node->type, '0.5');
        $form['xmlsitemap']['priority_override'] = array(
          '#type' => 'select',
          '#title' => t('Priority'),
          '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
          '#default_value' => isset($node->priority_override) ? $node->priority_override : -2.0,
          '#options' => $options,
          '#access' => user_access('override node priority') || user_access('administer nodes'),
        );
        $form['xmlsitemap_node_status'] = array(
          '#type' => 'value',
          '#value' => $node->status,
        );
      }
      break;
  }
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_type_priority_'. $info->type);
    variable_del('xmlsitemap_node_type_include_attachments_'. $info->type);
    if (cache_get('xmlsitemap_node_excludes')) {
      cache_clear_all('xmlsitemap_node_excludes', 'cache');
    }
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set('xmlsitemap_node_type_priority_'. $info->type, variable_get('xmlsitemap_node_type_priority_'. $info->old_type, 0.5));
    variable_del('xmlsitemap_node_type_priority_'. $info->old_type);
    variable_set('xmlsitemap_node_type_include_attachments_'. $info->type, variable_get('xmlsitemap_node_type_include_attachments_'. $info->old_type, FALSE));
    variable_del('xmlsitemap_node_type_include_attachments_'. $info->old_type);
    if (cache_get('xmlsitemap_node_excludes')) {
      cache_clear_all('xmlsitemap_node_excludes', 'cache');
    }
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  $mid = variable_get('xmlsitemap_node_id', 0);
  $anonymous = drupal_anonymous_user();
  $excludes = xmlsitemap_node_excludes();
  db_query("DELETE FROM {xmlsitemap} WHERE mid = %d AND type = %d AND tid = %d",
    array($mid, XMLSITEMAP_NODE_ATTACHMENT_TYPE, $node->nid)
  );
  switch ($op) {
    case 'prepare':
      $priority_override = db_result(db_query("SELECT p5 FROM {xmlsitemap} WHERE mid = %d AND type = %d AND tid = %d",
        array($mid, XMLSITEMAP_NODE_NODE_TYPE, $node->nid)
      ));
      $node->priority_override = $priority_override === FALSE ? -2.0 : $priority_override / 10;
      break;
    case 'insert':
      $link = new stdClass();
      $link->mid = $mid;
      $link->url = 'node/'. $node->nid;
      $link->type = XMLSITEMAP_NODE_NODE_TYPE;
      $link->tid = $node->nid;
      $link->p1 = $node->type;
      $link->p5 = isset($node->priority_override) ? ((integer) round($node->priority_override * 10, 0)) : -20;
      $link->p6 = $node->created;
      $link->enabled = (boolean) $node->status && !isset($excludes[$node->type]) && node_access('view', $node, $anonym);
      $link->language = $node->language;
      $link->changed = $node->changed;
      _xmlsitemap_node_change_freq($link, $node->created, $node->changed);
      _xmlsitemap_node_priority($link, $node);
      xmlsitemap_save_link($link);
      _xmlsitemap_node_add_node_attachments($mid, $link);
      break;
    case 'update':
      $query = "SELECT * FROM {xmlsitemap} WHERE mid = %d AND type = %d AND tid = %d";
      $link = db_fetch_object(db_query($query, array($mid, XMLSITEMAP_NODE_NODE_TYPE, $node->nid)));
      if ($link) {
        $update = TRUE;
        if (isset($node->priority_override)) {
          $link->p5 = (integer) round($node->priority_override * 10, 0);
        }
        $link->p6 = $link->changed;
        _xmlsitemap_node_change_freq($link, $link->p6, $link->changed);
      }
      else {
        $link = new stdClass();
        $link->mid = $mid;
        $link->url = 'node/'. $node->nid;
        $link->type = XMLSITEMAP_NODE_NODE_TYPE;
        $link->tid = $nid;
        $link->language = $node->language;
        $link->p1 = $node->type;
        $link->p5 = isset($node->priority_override) ? ((integer) round($node->priority_override * 10, 0)) : -20;
        $link->p6 = $node->created;
        _xmlsitemap_node_change_freq($link, $node->created, $node->changed);
      }
      $link->enabled = (boolean) $node->status && !isset($excludes[$node->type]) && node_access('view', $node, $anonym);
      $link->changed = $node->changed;
      _xmlsitemap_node_priority($link, $node);
      xmlsitemap_save_link($link, isset($update));
      _xmlsitemap_node_add_node_attachments($mid, $link);
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap} WHERE mid = %d AND tid = %d",
        array($mid, $node->nid)
      );
      break;
  }
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_node_node_operations() {
  $operations = array(
    'add_to_sitemap' => array(
      'label' => t('Add the selected posts to the XML site map'),
      'callback' => '_xmlsitemap_node_operations_update',
      'callback arguments' => array('op' => 'add_to_sitemap'),
    ),
    'remove_from_sitemap' => array(
      'label' => t('Remove the selected posts from the XML site map'),
      'callback' => '_xmlsitemap_node_operations_update',
      'callback arguments' => array('op' => 'remove_from_sitemap'),
    ),
  );
  return $operations;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_node_perm() {
  return array('override node priority');
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_node_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Node') .'</dt>'.
    '<dd>'. t('The module adds nodes to the site map, and optionaly the attachments of those nodes. The default priority of a node is determined by a combination of its <a href="@content">content type</a> priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('@content' => url('admin/content/types'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_node_xmlsitemap_sitemap_settings_alter(&$form) {
  $form['general']['priority']['xmlsitemap_node_promote_priority'] = array(
    '#type' => 'select',
    '#title' => t('Promotion adjustment'),
    '#description' => t('This number will be added to the priority of each post that is promoted to the front page.'),
    '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
    '#options' => xmlsitemap_priority_options(),
  );
  $form['general']['priority']['xmlsitemap_node_comment_priority'] = array(
    '#type' => 'select',
    '#title' => t('Comment ratio weight'),
    '#description' => t("This number will be added to the priority of the post with the highest number of comments. This doesn't apply if the maximum number of comments is one."),
    '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.2),
    '#options' => xmlsitemap_priority_options(),
  );
  $form['xmlsitemap_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content settings'),
    '#description' => t('The settings for the content to include in the site map.'),
    '#collapsible' => TRUE,
  );
  $form['xmlsitemap_node']['xmlsitemap_node_include_attachments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include node attachments in the site map'),
    '#description' => t("This is the default value used for all the content types."),
    '#default_value' => variable_get('xmlsitemap_node_include_attachments', FALSE),
  );
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Return the list of content types which are excluded from being added to the
 * site map.
 * @return array
 *  An array containing the content type identifiers for the content types not
 *  included in the site map. It caches the result.
 */
function xmlsitemap_node_excludes() {
  if ($cache = cache_get('xmlsitemap_node_excludes')) {
    return $cache->data;
  }
  $excludes = array();
  foreach (node_get_types() as $type => $name) {
    if (variable_get("xmlsitemap_node_type_priority_$type", 0.5) == -1.0) {
      $excludes[$type] = TRUE;
    }
  }
  cache_set('xmlsitemap_node_excludes', $excludes);
  return $excludes;
}

/**
 * Return the absolute URL of the links added in the site map by
 * xmlsitemap_node.module.
 * @param $type
 *  The type of link associated with the path.
 * @param $path
 *  The relative path of the link being added to the site map.
 * @return
 *   The absolute URL of the path. If there is an alias, it will be used.
 */
function xmlsitemap_node_url($type, $path) {
  switch ($type) {
    case XMLSITEMAP_NODE_ATTACHMENT_TYPE:
      $url = file_create_url($path);
      break;
    default:
      $url = url($path, array('absolute' => TRUE));
      break;
  }
  return $url;
}

/*****************************************************************************
 * Private functions - node operation callbacks.
 ****************************************************************************/

/**
 * Node operations callback.
 */
function _xmlsitemap_node_operations_update($nodes, $op) {
  if (count($nodes) > 10) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_node_batch_process', array($nodes, $op))
      ),
      'finished' => '_xmlsitemap_node_batch_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
  else {
    $function = '_xmlsitemap_node_'. $op;
    foreach ($nodes as $nid) {
      $function($nid);
    }
    drupal_set_message(t(('The update has been performed.')));
  }
}

/*****************************************************************************
 * Private functions - batch operation callbacks.
 ****************************************************************************/

/**
 * Node operations batch finished callback.
 */
function _xmlsitemap_node_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  }
}

/**
 * Node operations batch process callback.
 */
function _xmlsitemap_node_batch_process($nodes, $op, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
  }
  $nid = array_shift($context['sandbox']['nodes']);
  $function = '_xmlsitemap_node_'. $op;
  if ($node = $function($nid)) {
    $context['results'][] = l($node->title, 'node/'. $node->nid);
  }
  $context['sandbox']['progress']++;
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/*****************************************************************************
 * Private functions - node, and batch operations support functions.
 ****************************************************************************/

function _xmlsitemap_node_add_to_sitemap($nid) {
  if ($node = node_load($nid)) {

  }
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Include the links for the node attachment into the xmlsitemap table.
 * @param $mid
 *   The module ID.
 * @param $node
 *   The object containing the link data for the node containing the
 *   attachments.
 */
function _xmlsitemap_node_add_node_attachments($mid, $node) {
  if (variable_get('xmlsitemap_node_type_include_attachments_'. $node->p1, variable_get('xmlsitemap_node_include_attachments', FALSE))) {
    $result = db_query("SELECT fi.fid,fi.filapath FROM {upload} up
      INNER JOIN {files} fi ON fi.fid = up.fid
      WHERE up.nid = %d
        AND fi.status = %d",
      array($node->nid, TRUE)
    );
    $link = new stdClass();
    $link->mid = $mid;
    $link->type = XMLSITEMAP_NODE_ATTACHMENT_TYPE;
    $link->tid = $node->tid;
    $link->language = $node->language;
    $link->p1 = $node->p1;
    $link->enabled = $node->enabled;
    while ($file = db_fetch_object($result)) {
      $link->url = $file->filepath;
      $link->tsid = $file->fid;
      $count = db_result(db_query("SELECT COUNT(xm.url) FROM {xmlsitemap} xm
        WHERE xm.mid = &d
          AND xm.type = %d
          AND xm.url = '%s'",
        array($mid, XMLSITEMAP_NODE_ATTACHMENT_TYPE, $link->url)
      ));
      if ($count == 0) {
        xmlsitemap_save_link($link);
      }
    }
  }
}

/**
 * Set the changefreq field for the link being added to the xmlsitemap table.
 * @param &$link
 *   The object containing the link data.
 * @param $previosly_changed
 *   The Unix timestamp for the previous change made to the node.
 * @param $changed
 *   The Unix timestamp for the last change made to the node.
 */
function _xmlsitemap_node_change_freq(&$link, $previously_changed, $changed) {
  $link->changefreq = max(time() - $changed, $changed - $previously_changed);
}

/**
 * Set the priority field for the link being added to the xmlsitemap table.
 * @param &$link
 *   The object containing the link data.
 * @param $node
 *   The node object.
 */
function _xmlsitemap_node_priority(&$link, $node) {
  if (isset($node->priority_override) && $node->priority_override != -2.0) {
    $priority = $node->priority_override;
  }
  else {
    $priority = variable_get('xmlsitemap_node_type_priority_'. $node->type, 0.5);
  }
  if ($node->promote) {
    $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
  }
   $priority += $link->p7 * variable_get('xmlsitemap_node_comment_priority', 0.2) / 10;
  $link->priority = min(round($priority, 1), 1);
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
