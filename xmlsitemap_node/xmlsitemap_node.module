<?php
// $Id$

/**
 * Implementation of hook_cron().
 *
 * Process old nodes not found in the {xmlsitemap} table.
 */
function xmlsitemap_node_cron() {
  // Start with the most recently changed nodes first.
  $query = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {xmlsitemap} x ON x.type = 'node' AND n.nid = x.id WHERE (x.id IS NULL OR x.status IS NULL) ORDER BY n.changed DESC", 0, xmlsitemap_var('batch_limit'));
  while ($nid = db_result($query)) {
    $node = node_load($nid, NULL, TRUE);
    xmlsitemap_node_create_link($node);
    xmlsitemap_save_link($node->xmlsitemap);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      if ($data = xmlsitemap_load_link(array('type' => 'node', 'id' => $node->nid))) {
        return array('xmlsitemap' => $data);
      }
      break;
    case 'insert':
      xmlsitemap_node_create_link($node);
      xmlsitemap_save_link($node->xmlsitemap);
      break;
    case 'update':
      xmlsitemap_node_create_link($node);
      if ($node->revision) {
        // Update the change frequency.
        xmlsitemap_recalculate_changefreq($node->xmlsitemap);
      }
      xmlsitemap_save_link($node->xmlsitemap);
      break;
    case 'delete':
      xmlsitemap_delete_link(array('type' => 'node', 'id' => $node->nid));
      break;
  }
}

/**
 * Impelementation of hook_comment().
 */
function xmlsitemap_node_comment($comment, $op) {
  switch ($op) {
    case 'delete':
    case 'publish':
    case 'unpublish':
      $comment = (object) $comment;
      if ($node = node_load($comment->nid, NULL, TRUE)) {
        xmlsitemap_node_create_link($node);
        if ($op == 'publish') {
          xmlsitemap_recalculate_changefreq($node->xmlsitemap);
        }
        xmlsitemap_save_link($node->xmlsitemap);
      }
      break;
  }
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_status_' . $info->type);
    variable_del('xmlsitemap_node_priority_' . $info->type);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    xmlsitemap_node_create_link($node);

    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Sitemap'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 30,
      '#access' => FALSE && (user_access('administer xmlsitemap') || user_access('administer nodes')),
    );
    //$form['xmlsitemap']['status'] = array(
    //  '#type' => 'checkbox',
    //  '#title' => t('Include this content in the sitemap.'),
    //  '#default_value' => $node->xmlsitemap['status'],
    //);
    //$form['xmlsitemap']['priority'] = array(
    //  '#type' => 'select',
    //  '#title' => t('Priority'),
    //  '#options' => xmlsitemap_get_priority_options(TRUE, variable_get('xmlsitemap_node_priority_' . $node->type, 'default')),
    //  '#default_value' => $node->xmlsitemap['priority'],
    //);
    $form['xmlsitemap']['lastmod'] = array(
      '#type' => 'value',
      '#value' => $node->xmlsitemap['lastmod'],
    );
    $form['xmlsitemap']['changefreq'] = array(
      '#type' => 'value',
      '#value' => $node->xmlsitemap['changefreq'],
    );
    $form['xmlsitemap']['changecount'] = array(
      '#type' => 'value',
      '#value' => $node->xmlsitemap['changecount'],
    );
    //if (isset($node->nid) && !node_access('view', $node, drupal_anonymous_user())) {
    //  $form['xmlsitemap']['xmlsitemap_status']['#disabled'] = TRUE;
    //  $form['xmlsitemap']['xmlsitemap_status']['#description'] = t('If this content is not viewable by anonymous users, it will be excluded from the sitemap.');
    //}
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see node_type_form()
 */
function xmlsitemap_node_form_node_type_form_alter(&$form, $form_state) {
  $type = $form['#node_type']->type;
  $form['xmlsitemap'] = array(
    '#type' => 'fieldset',
    '#title' => t('XML sitemap'),
    '#description' => t('Changing these settings will not change existing any existing content of this type.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['xmlsitemap']['xmlsitemap_node_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include this content type in the sitemap.'),
    '#default_value' => variable_get('xmlsitemap_node_status_' . $type, TRUE),
    '#access' => FALSE,
  );
  $form['xmlsitemap']['xmlsitemap_node_priority'] = array(
    '#type' => 'select',
    '#title' => t('Default priority'),
    '#options' => xmlsitemap_get_priority_options(TRUE),
    '#default_value' => variable_get('xmlsitemap_node_priority_' . $type, 'default'),
  );
  //$form['xmlsitemap']['xmlsitemap_node_update'] = array(
  //  '#type' => 'checkbox',
  //  '#title' => t('Update existing nodes if these sitemap settings are changed.'),
  //  '#description' => t('This may take a while. If this is not selected, existing node sitemap links will not be affected. You can also run a <a href="admin/settings/xmlsitemap/rebuild">sitemap rebuild</a> at a later time.'),
  //  '#default_value' => variable_get('xmlsitemap_node_update_' . $type, FALSE),
  //  '#access' => FALSE,
  //);

  array_unshift($form['#submit'], 'xmlsitemap_node_type_form_submit');
}

function xmlsitemap_node_type_form_submit($form, $form_state) {
  $new_type = $form_state['values']['type'];
  $old_type = $form_state['values']['old_type'];
  $new_priority = $form_state['values']['xmlsitemap_node_priority'];
  $new_status = $form_state['values']['xmlsitemap_node_status'];

  $updates = array();
  $args = array();

  if ($new_priority != variable_get('xmlsitemap_node_priority_' . $old_type, 'default')) {
    if ($new_priority == 'default') {
      $updates[] = "priority = NULL";
    }
    else {
      $updates[] = "priority = %f";
      $args[] = $new_priority;
    }
  }
  if ($old_type != $new_type) {
    $updates[] = "node_type = '%s'";
    $args[] = $new_type;
  }
  //if ($new_status != variable_get('xmlsitemap_node_status_' . $old_type, TRUE)) {
  //  if ($new_status) {
  //    $updates[] = "status = NULL";
  //  }
  //  else {
  //    $updates[] = "status = %d";
  //    $args[] = FALSE;
  //  }
  //}

  // Process node type updates.
  if ($updates) {
    $sql = "UPDATE {xmlsitemap} SET " . implode(', ', $updates) . " WHERE node_type = '%s'";
    $args[] = $old_type;
    db_query($sql, $args);
    variable_set('xmlsitemap_regenerate_needed', TRUE);
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links($offset = 0, $limit = 0) {
  $links = array();

  $sql = "SELECT n.nid FROM {node} n WHERE n.nid > %d ORDER BY n.nid";
  $query = ($limit ? db_query_range($sql, $offset, 0, $limit) : db_query($sql, $offset));

  while ($nid = db_result($query)) {
    $node = node_load($nid, NULL, TRUE);
    xmlsitemap_node_create_link($node);
    $links[] = $node->xmlsitemap;
  }

  return $links;
}

/**
 * Implementation of hook_xmlsitemap_links_batch_info().
 */
function xmlsitemap_node_xmlsitemap_links_batch_info() {
  return array(
    'max' => db_result(db_query("SELECT COUNT(n.nid) FROM {node} n")),
  );
}

/**
 * Implementation of hook_xmlsitemap_links_clear().
 */
function xmlsitemap_node_xmlsitemap_links_clear() {
  db_query("DELETE FROM {xmlsitemap} WHERE type = 'node'");
}

///**
// * Implementation of hook_node_operations().
// */
//function xmlsitemap_node_node_operations() {
//  return array(
//    'xmlsitemap_include' => array(
//      'label' => t('Include in the sitemap'),
//      'callback' => 'xmlsitemap_node_mass_update',
//      'callback arguments' => array('updates' => array('status' => 1)),
//    ),
//    'xmlsitemap_exclude' => array(
//      'label' => t('Exclude from the sitemap'),
//      'callback' => 'xmlsitemap_node_mass_update',
//      'callback arguments' => array('updates' => array('status' => 0)),
//    ),
//  );
//}
//
///**
// * Perform a mass update of node sitemap links.
// *
// * @param $nodes
// *   An array of node IDs.
// */
//function xmlsitemap_node_mass_update($nodes, $updates) {
//  // We use batch processing to prevent timeout when updating a large number
//  // of nodes.
//  if (count($nodes) > 10) {
//    $batch = array(
//      'operations' => array(
//        array('_xmlsitemap_node_mass_update_batch_process', array($nodes, $updates))
//      ),
//      'finished' => '_xmlsitemap_node_mass_update_batch_finished',
//      'title' => t('Processing'),
//      'progress_message' => '',
//      'error_message' => t('The update has encountered an error.'),
//    );
//    batch_set($batch);
//  }
//  else {
//    foreach ($nodes as $nid) {
//      _xmlsitemap_node_mass_update_helper($nid, $updates);
//    }
//    drupal_set_message(t('The update has been performed.'));
//  }
//}
//
///**
// * Update a node sitemap link.
// *
// * @param $nid
// *   A node ID.
// * @return
// *   A node object after it has been updated.
// */
//function _xmlsitemap_node_mass_update_helper($nid, $updates) {
//  $node = node_load($nid, NULL, TRUE);
//  xmlsitemap_node_create_link($node);
//
//  foreach ($updates as $key => $value) {
//    $node->xmlsitemap[$key] = $value;
//  }
//
//  xmlsitemap_save_link($node->xmlsitemap);
//  return $node;
//}
//
///**
// * Batch callback; sitemap node links mass update operation.
// */
//function _xmlsitemap_node_mass_update_batch_process($nodes, $updates, &$context) {
//  if (!isset($context['sandbox']['progress'])) {
//    $context['sandbox']['progress'] = 0;
//    $context['sandbox']['max'] = count($nodes);
//    $context['sandbox']['nodes'] = $nodes;
//  }
//
//  // Process nodes in groups of 10.
//  foreach (array_splice($nodes, 0, 10) as $nid) {
//    $node = _xmlsitemap_node_mass_update_helper($nid, $updates);
//    // Store result for post-processing in the finished callback and update
//    // our progress information.
//    $context['results'][] = l($node->title, 'node/' . $node->nid);
//    $context['sandbox']['progress']++;
//  }
//
//  // Inform the batch engine that we are not finished,
//  // and provide an estimation of the completion level we reached.
//  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
//    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
//  }
//}
//
///**
// * Batch callback; sitemap node links mass update finished.
// */
//function _xmlsitemap_node_mass_update_batch_finished() {
//  if ($success) {
//    drupal_set_message(t('The update has been performed.'));
//  }
//  else {
//    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
//    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
//    $message .= theme('item_list', $results);
//    drupal_set_message($message);
//  }
//}

/**
 * Get the sitemap link status of a node.
 *
 * @param $node
 *   A node object.
 * @return
 *   TRUE if the node is viewable by anonymous users and it has not been
 *   manually excluded from the sitemap, otherwise FALSE.
 */
function xmlsitemap_node_get_status($node) {
  $status = variable_get('xmlsitemap_node_status_' . $node->type, TRUE);
  $status &= node_access('view', $node, drupal_anonymous_user());
  return $status;
}

/**
 * Fetch all the timestamps for when a node was changed.
 *
 * @param $node
 *   A node object.
 * @return
 *   An array of UNIX timestamp integers.
 */
function xmlsitemap_node_get_timestamps($node) {
  static $timestamps = array();

  if (!isset($timestamps[$node->nid])) {
    $timestamps[$node->nid] = array();
    $query = db_query("SELECT c.timestamp FROM {comments} c WHERE c.nid = %d AND c.status = %d UNION ALL SELECT nr.timestamp FROM {node_revisions} nr WHERE nr.nid = %d", $node->nid, COMMENT_PUBLISHED, $node->nid);
    while ($timestamp = db_result($query)) {
      $timestamps[$node->nid][] = (int) $timestamp;
    }
  }

  return $timestamps[$node->nid];
}

/**
 * Create a sitemap link from a node.
 *
 * The link will be saved as $node->xmlsitemap.
 *
 * @param $node
 *   A node object.
 */
function xmlsitemap_node_create_link(&$node) {
  if (!isset($node->nid)) {
    // Handle new nodes that do not have a value for nid yet.
    $node->nid = NULL;
  }

  if (!isset($node->xmlsitemap)) {
    $node->xmlsitemap = array();
  }

  $node->xmlsitemap += array(
    'type' => 'node',
    'id' => $node->nid,
    'loc' => 'node/'. $node->nid,
    'status' => xmlsitemap_node_get_status($node),
    'priority' => variable_get('xmlsitemap_node_priority_' . $node->type, 'default'),
    'lastmod' => isset($node->changed) ? $node->changed : REQUEST_TIME,
    'changefreq' => xmlsitemap_calculate_changefreq(xmlsitemap_node_get_timestamps($node)),
    'changecount' => count(xmlsitemap_node_get_timestamps($node)) - 1,
    'node_type' => $node->type,
    'language' => $node->language,
  );

  return $node->xmlsitemap;
}

/**
 * Internal default variables for xmlsitemap_node_var().
 */
function xmlsitemap_node_variables() {
  $defaults = array();
  $node_types = array_keys(node_get_types('names'));
  foreach ($node_types as $node_type) {
    $defaults['xmlsitemap_node_priority_' . $node_type] = 'default';
    $defaults['xmlsitemap_node_status_' . $node_type] = TRUE;
    $defaults['xmlsitemap_node_update_' . $node_type] = FALSE;
  }
  return $defaults;
}

///**
// * Internal implementation of variable_get().
// */
//function xmlsitemap_node_var($name, $default = NULL) {
//  static $defaults;
//  if (!isset($defaults)) {
//    $defaults = xmlsitemap_node_variables();
//  }
//
//  $name = 'xmlsitemap_node_'. $name;
//
//  // @todo Remove when stable.
//  if (!isset($defaults[$name])) {
//    trigger_error(t('Default variable for %variable not found.', array('%variable' => $name)));
//  }
//
//  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
//}
