<?php
// $Id$

/**
 * @file
 * Unit tests for the xmlsitemap_i18n module.
 */

/**
 * Common base test class for XML sitemap internationalization tests.
 */
class XMLSitemapI18nWebTestCase extends XMLSitemapTestHelper {
  protected $languages;

  /**
   * Set up an administrative user account and testing keys.
   */
  function setUp() {
    // Call parent::setUp() allowing Mollom test cases to pass further modules.
    $modules = func_get_args();
    $modules = array_merge(array('locale', 'translation', 'i18n', 'xmlsitemap_i18n'), $modules);
    call_user_func_array(array('parent', 'setUp'), $modules);

    $this->admin_user = $this->drupalCreateUser(array(
      'administer languages',
      'translate content',
      'access administration pages',
      'administer nodes',
      //'administer menu',
      //'administer taxonomy',
      'administer xmlsitemap',
    ));

    // Add predefined language and reset the locale cache.
    require_once './includes/locale.inc';
    locale_add_language('fr');
    locale(NULL, NULL, TRUE);

    variable_set('xmlsitemap_languages', array('en', 'fr'));
    variable_set('language_negotiation', LANGUAGE_NEGOTIATION_PATH_DEFAULT);

    $this->languages = language_list();
    $this->languages[''] = NULL;
  }

  protected function assertLanguageSitemap($language, array $links_included = array(), array $links_excluded = array()) {
    $sitemap_url = url('sitemap.xml', array('absolute' => TRUE, 'language' => $this->languages[$language]));
    $this->drupalGet($sitemap_url);

    // Test for included links.
    foreach ($links_included as $link) {
      if (isset($link->xmlsitemap)) {
        $link = $link->xmlsitemap;
      }
      elseif (isset($link['xmlsitemap'])) {
        $link = $link['xmlsitemap'];
      }
      $link['language'] = $link['language'] ? $link['language'] : $language;
      $link_url = url($link['loc'], array('absolute' => TRUE, 'language' => $this->languages[$link['language']]));
      $this->assertRaw($link_url, 'Link ' . $link_url . ' found.');
    }

    // Test for exlucded links.
    foreach ($links_excluded as $link) {
      if (isset($link->xmlsitemap)) {
        $link = $link->xmlsitemap;
      }
      elseif (isset($link['xmlsitemap'])) {
        $link = $link['xmlsitemap'];
      }
      $link['language'] = $link['language'] ? $link['language'] : $language;
      $link_url = url($link['loc'], array('absolute' => TRUE, 'language' => $this->languages[$link['language']]));
      $this->assertNoRaw($link_url, 'Link ' . $link_url . ' not found.');
    }
  }
}

class XMLSitemapI18nNodeTest extends XMLSitemapI18nWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'XML sitemap i18n node tests',
      'description' => 'Functional and integration tests for the XML sitemap node and internationalization modules.',
      'group' => 'XML sitemap',
    );
  }

  function setUp() {
    parent::setUp('xmlsitemap_node');
    variable_set('language_content_type_page', 1);
    variable_set('xmlsitemap_node_status_page', 1);
  }

  function testNodeLanguageData() {
    $this->drupalLogin($this->admin_user);
    $node = $this->drupalCreateNode(array());

    $this->drupalPost('node/' . $node->nid . '/edit', array('language' => 'en'), t('Save'));
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertIdentical($node->xmlsitemap['language'], 'en');

    $this->drupalPost('node/' . $node->nid . '/edit', array('language' => 'fr'), t('Save'));
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertIdentical($node->xmlsitemap['language'], 'fr');
  }

  function testNodeLanguage() {
    // Create our three different language nodes.
    $node1 = $this->drupalCreateNode(array('language' => ''));
    $node2 = $this->drupalCreateNode(array('language' => 'en'));
    $node3 = $this->drupalCreateNode(array('language' => 'fr'));

    variable_set('i18n_selection_mode', 'off');
    $this->regenerateSitemap();
    $this->assertLanguageSitemap('', array($node1, $node2, $node3));
    $this->assertLanguageSitemap('en', array($node1, $node2, $node3));
    $this->assertLanguageSitemap('fr', array($node1, $node2, $node3));

    variable_set('i18n_selection_mode', 'simple');
    $this->regenerateSitemap();
    $this->assertLanguageSitemap('', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('en', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('fr', array($node1, $node3), array($node2));

    variable_set('i18n_selection_mode', 'mixed');
    $this->regenerateSitemap();
    $this->assertLanguageSitemap('', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('en', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('fr', array($node1, $node2, $node3), array());

    variable_set('i18n_selection_mode', 'default');
    $this->regenerateSitemap();
    $this->assertLanguageSitemap('', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('en', array($node1, $node2), array($node3));
    $this->assertLanguageSitemap('fr', array($node1, $node2), array($node3));

    variable_set('i18n_selection_mode', 'strict');
    $this->regenerateSitemap();
    $this->assertLanguageSitemap('', array($node2), array($node1, $node3));
    $this->assertLanguageSitemap('en', array($node2), array($node1, $node3));
    $this->assertLanguageSitemap('fr', array($node3), array($node1, $node2));
  }
}
