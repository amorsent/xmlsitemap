<?php
// $Id$

/**
 * @file
 * Unit tests for the xmlsitemap module.
 */

/**
 * Helper test class with some added functions for testing.
 */
class XMLSitemapTestHelper extends DrupalWebTestCase {

  /**
   * Assert that a link is found in the sitemap.
   *
   * @param $conditions
   *   An array of values/conditions to match keyed by field name.
   */
  protected function assertInSitemap($conditions) {
    $link = xmlsitemap_load_link($conditions);
    $this->assertTrue($link && $link['status'], t('Link found in sitemap.'));
    return $link;
  }

  /**
   * Assert that a link is not found in the sitemap.
   *
   * @param $conditions
   *   An array of values/conditions to match keyed by field name.
   */
  protected function assertNotInSitemap($conditions) {
    $link = xmlsitemap_load_link($conditions);
    $this->assertTrue(!$link || !$link['status'], t('Link not found in sitemap.'));
    return $link;
  }

  //protected function addSitemapLink($link = array()) {
  //  static $last_id = 1;
  //
  //  $link += array(
  //    'type' => 'custom',
  //    'id' => $last_id++,
  //    'loc' => 'customlink/' . mt_rand(1, 10000),
  //  );
  //
  //  xmlsitemap_save_link($link);
  //}

  /**
   * Regenerate the sitemap by setting the regenerate flag and running cron.
   */
  protected function regenerateSitemap() {
    variable_set('xmlsitemap_regenerate_needed', TRUE);
    variable_set('cron_last', REQUEST_TIME - xmlsitemap_var('minimum_lifetime') - 30);
    drupal_cron_run();
    //$this->drupalGet(url('cron.php', array('absolute' => TRUE)));
  }
}

class XMLSitemapUnitTest extends XMLSitemapTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'XML Sitemap unit tests',
      'description' => 'Unit tests for the XML Sitemap module.',
      'group' => 'XML Sitemap',
    );
  }

  function setUp() {
    parent::setUp('xmlsitemap');
  }

  /**
   * Test the xmlsitemap_get_changefreq() function.
   */
  function testGetChangefreq() {
    $values = array();
    $values[0] = FALSE;
    $values[mt_rand(1, XMLSITEMAP_FREQUENCY_ALWAYS)] = 'always';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_ALWAYS + 1, XMLSITEMAP_FREQUENCY_HOURLY)] = 'hourly';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_HOURLY + 1, XMLSITEMAP_FREQUENCY_DAILY)] = 'daily';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_DAILY + 1, XMLSITEMAP_FREQUENCY_WEEKLY)] = 'weekly';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_WEEKLY + 1, XMLSITEMAP_FREQUENCY_MONTHLY)] = 'monthly';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_MONTHLY + 1, XMLSITEMAP_FREQUENCY_YEARLY)] = 'yearly';
    $values[mt_rand(XMLSITEMAP_FREQUENCY_YEARLY + 1, mt_getrandmax())] = 'never';

    foreach ($values as $value => $expected) {
      $actual = xmlsitemap_get_changefreq($value);
      $this->assertIdentical($actual, $expected, t('Interval %interval was %actual, expected %expected.', array('%interval' => format_interval($value), '%actual' => $actual, '%expected' => $expected)));
    }
  }

  function testGetChunkCount() {

  }

  function testGetChunkFile() {

  }

  function testGetChunkSize() {

  }

  function testGetLinkCount() {

  }

  function testCalculateChangefreq() {

  }

  function testRecalculateChangefreq() {

  }
}

class XMLSitemapFunctionalTest extends XMLSitemapTestHelper {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'XML Sitemap interface tests',
      'description' => 'Funcitonal tests for the XML Sitemap module.',
      'group' => 'XML Sitemap',
    );
  }

  function setUp() {
    parent::setUp('xmlsitemap', 'path');
    $this->admin_user = $this->drupalCreateUser(array('access content', 'administer xmlsitemap'));
    $this->drupalLogin($this->admin_user);

    // Check the files directory is created (massive fails if not done).
    $path = file_create_path(xmlsitemap_var('path'));
    file_check_directory($path, FILE_CREATE_DIRECTORY);
  }

  function testCustomLinks() {
    path_set_alias('node', 'content');

    $edit = array();
    $edit['xmlsitemap_custom_links'] = "invalid-path";
    $this->drupalPost('admin/settings/xmlsitemap', $edit, t('Save configuration'));
    $this->assertText(t('The custom link invalid-path is either invalid or it cannot be accessed by anonymous users.'));

    $edit['xmlsitemap_custom_links'] = "admin/user/user";
    $this->drupalPost('admin/settings/xmlsitemap', $edit, t('Save configuration'));
    $this->assertText(t('The custom link admin/user/user is either invalid or it cannot be accessed by anonymous users.'));

    $edit['xmlsitemap_custom_links'] = "content\n";
    $this->drupalPost('admin/settings/xmlsitemap', $edit, t('Save configuration'));
    $this->assertText(t('The sitemap system stores system paths only, but will use the URL alias in the sitemap output. The custom link content has been stored as node.'));
    $this->assertInSitemap(array('type' => 'custom', 'loc' => 'node'));
  }

  /**
   * Test the sitemap file caching.
   */
  function testSitemapCaching() {
    $this->drupalGet('sitemap.xml');
    $this->assertResponse(200);
    $etag = $this->drupalGetHeader('etag');
    $last_modified = $this->drupalGetHeader('last-modified');
    $this->assertTrue($etag, t('Etag header found.'));
    $this->assertTrue($last_modified, t('Last-modified header found.'));

    $this->drupalGet('sitemap.xml', array(), array('If-Modified-Since: ' . $last_modified, 'If-None-Match: ' . $etag));
    $this->assertResponse(304);
  }

  /**
   * Test that the sitemap will not be genereated before the lifetime expires.
   */
  function testMinimumLifetime() {
    $this->drupalGet('sitemap.xml');
    $this->assertNoRaw('lifetime-test');

    xmlsitemap_save_link(array('type' => 'testing', 'id' => 1, 'loc' => 'lifetime-test'));
    $this->drupalGet('sitemap.xml');
    $this->assertNoRaw('lifetime-test');

    $this->regenerateSitemap();
    $this->drupalGet('sitemap.xml');
    $this->assertRaw('lifetime-test');
  }
}
