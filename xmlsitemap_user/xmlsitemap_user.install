<?php
// $Id$

/**
 * @file
 * Installation file for XML Sitemap: User.
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_user_enable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_user_disable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_user_schema() {
  $schema['xmlsitemap_user'] = array(
    'description' => 'The base table for xmlsitemap_user.',
    'fields' => array(
      'uid' => array(
        'description' => 'The user ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp of the last change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'previously_changed' => array(
        'description' => 'The Unix timestamp of the previous change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'comments' => array(
        'description' => 'The number of comments authored from the user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority_override' => array(
        'description' => 'The priority of the term in the site map.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      ),
    ),
    'primary key' => array('uid'),
  );
  $schema['xmlsitemap_user_role'] = array(
    'description' => 'The user roles settings table.',
    'fields' => array(
      'rid' => array(
        'description' => 'The role ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'description' => t('The priority assigned to the role.'),
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.5,
      ),
    ),
    'primary key' => array('rid'),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_user_install() {
  drupal_install_schema('xmlsitemap_user');
  db_query("UPDATE {system} SET weight = 5 WHERE name = 'xmlsitemap_user'");
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6000() {
  $ret = array();
  if (db_table_exists('xmlsitemap_user')) {
    if (db_column_exists('xmlsitemap_user', 'pid')) {
      $result = array();
      @db_drop_index($result, 'xmlsitemap_user', 'pid');
      if ($result[0]['success']) {
        $ret = $result[0];
      }
      db_drop_field($ret, 'xmlsitemap_user', 'pid');
    }
    if (db_column_exists('xmlsitemap_user', 'uid')) {
      $result = array();
      @db_drop_primary_key($result, 'xmlsitemap_user');
      if ($result[0]['success']) {
        $ret[] = $result[0];
      }
      db_change_field($ret, 'xmlsitemap_user', 'uid', 'uid',
        array(
          'description' => 'The user ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        array('primary key' => array('uid'))
      );
    }
    if (db_column_exists('xmlsitemap_user', 'last_changed')) {
      db_change_field($ret, 'xmlsitemap_user', 'last_changed', 'changed',
        array(
          'description' => 'The Unix timestamp of the last change.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    else {
      if (db_column_exists('xmlsitemap_user', 'changed')) {
        db_change_field($ret, 'xmlsitemap_user', 'changed', 'changed',
          array(
            'description' => 'The Unix timestamp of the last change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          )
        );
      }
      else {
        db_add_field($ret, 'xmlsitemap_user', 'changed',
          array(
            'description' => 'The Unix timestamp of the last change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          )
        );
      }
    }
    if (!db_column_exists('xmlsitemap_user', 'comments')) {
      db_add_field($ret, 'xmlsitemap_user', 'comments',
        array(
          'description' => 'The number of comments authored from the user.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    $ret[] = update_sql("UPDATE {xmlsitemap_user}
      SET priority_override = -2.0
      WHERE priority_override IS NULL"
    );
    db_change_field($ret, 'xmlsitemap_user', 'priority_override', 'priority_override',
      array(
        'description' => 'The priority of the term in the site map.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      )
    );
  }
  else {
    db_create_table($ret, 'xmlsitemap_user',
      array(
        'description' => 'The base table for xmlsitemap_user.',
        'fields' => array(
          'uid' => array(
            'description' => 'The user ID.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
          'changed' => array(
            'description' => 'The Unix timestamp of the last change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
          'previously_changed' => array(
            'description' => 'The Unix timestamp of the previous change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
          'comments' => array(
            'description' => 'The number of comments authored from the user.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
          'priority_override' => array(
            'description' => 'The priority of the term in the site map.',
            'type' => 'float',
            'not null' => TRUE,
            'default' => -2.0,
          ),
        ),
        'primary key' => array('uid'),
      )
    );
  }
  if (db_table_exists('xmlsitemap_user_role')) {
    if (db_column_exists('xmlsitemap_user_role', 'pid')) {
      $result = array();
      @db_drop_index($result, 'xmlsitemap_user_role', 'pid');
      if ($result[0]['success']) {
        $ret = $result[0];
      }
      db_drop_field($ret, 'xmlsitemap_user_role', 'pid');
    }
    $result = array();
    @db_drop_primary_key($result, 'xmlsitemap_user_role');
    if ($result[0]['success']) {
      $ret[] = $result[0];
    }
    db_change_field($ret, 'xmlsitemap_user_role', 'rid', 'rid',
      array(
        'description' => 'The role ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      array('primary key' => array('rid'))
    );
    $ret[] = update_sql("UPDATE {xmlsitemap_user_role}
      SET priority = 0.5
      WHERE priority IS NULL"
    );
    db_change_field($ret, 'xmlsitemap_user_role', 'priority', 'priority',
      array(
        'description' => t('The priority assigned to the role.'),
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.5,
      )
    );
    db_change_field($ret, 'xmlsitemap_user_role', 'priority', 'priority',
      array(
        'description' => t('The priority assigned to the role.'),
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.5,
      )
    );
  }
  else {
    db_create_table($ret, 'xmlsitemap_user_role',
      array(
       'description' => 'The base table for xmlsitemap.',
       'fields' => array(
          'rid' => array(
            'description' => 'The role ID.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
          'priority' => array(
            'description' => t('The priority assigned to the role.'),
            'type' => 'float',
            'not null' => TRUE,
            'default' => 0.5,
          ),
       ),
       'primary key' => array('rid'),
      )
    );
  }
  $ret[] = update_sql("UPDATE {system} SET weight = 7 WHERE name = 'xmlsitemap_user'");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6100() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6101() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6102() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6103() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6104() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6105() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6106() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6107() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6108() {
  $ret[] = update_sql("UPDATE {system} SET weight = 5 WHERE name = 'xmlsitemap_user'");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6109() {
  return array();
}

/**
 * Implementation of hook_update_N().
 *
 */
function xmlsitemap_user_update_6110() {
  $ret = xmlsitemap_user_update_6000();
  $batch = array(
    'operations' => array(
      array('_xmlsitemap_user_update_database_batch', array())
    ),
    'title' => t('Processing'),
    'progress_message' => '',
    'error_message' => t('The update has encountered an error.'),
  );
  batch_set($batch);
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE XMLSITEMAP_USER TABLE',
  );
  return $ret;
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_user_uninstall() {
  drupal_uninstall_schema('xmlsitemap_user');
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Batch function to update the xmlsitemap_node table.
 */
function _xmlsitemap_user_update_database_batch(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(*) FROM {users} WHERE uid <> 0'));
    $context['sandbox']['uid'] = 0;
  }
  $user = db_fetch_object(
    db_query('SELECT * FROM {users}
      WHERE uid > %d', $context['sandbox']['uid']
    )
  );
  if ($user) {
    $result = db_fetch_object(
      db_query('SELECT * FROM {xmlsitemap_user}
        WHERE uid = %d', $user->uid
      )
    );
    if ($result === FALSE) {
      $row = new stdClass();
      $row->uid = $user->uid;
      $row->changed = $user->access;
      $row->previously_changed = $user->created;
    }
    else {
      $row = $result;
      if ($row->changed < $user->access) {
        $row->previously_changed = $row->changed;
        $row->changed = $user->access;
      }
    }
    if (module_exists('comment')) {
      $row->comments = (integer) db_result(db_query("SELECT COUNT(cid) FROM {comments} WHERE uid = %d", $user->uid));
    }
    drupal_write_record('xmlsitemap_user', $row, $result === FALSE ? NULL : 'uid');
    $context['sandbox']['uid'] = $user->uid;
    $context['message'] = t('Updating %name', array('%name' => $user->name));
  }
  $context['sandbox']['progress']++;
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    xmlsitemap_update_sitemap();
  }
}
