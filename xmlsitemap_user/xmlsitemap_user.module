<?php
// $Id$

/**
 * @file
 * Adds user profiles to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_user_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'user_admin_settings':
      xmlsitemap_add_settings_fieldset($form,
        array('buttons' => array('buttons'))
      );
      $default = variable_get('xmlsitemap_user_default_priority', 0.5);
      $form['xmlsitemap']['xmlsitemap_user_default_priority'] = array(
        '#type' => 'select',
        '#title' => t('Default user priority'),
        '#description' => t('Choose the default priority for users who have only the authenticated user role.'),
        '#default_value' => $default,
        '#options' => xmlsitemap_priority_options('exclude'),
      );
      $form['#submit'][] = 'xmlsitemap_user_form_submit';
      break;
    case 'user_admin_role':
      $options = xmlsitemap_priority_options('exclude');
      $priority = db_result(db_query("SELECT priority
        FROM {xmlsitemap_user_role}
        WHERE rid = %d", $form['rid']['#value'])
      );
      if ($priority === FALSE) {
        $priority = 0.5;
      }
      xmlsitemap_add_settings_fieldset($form,
        array('buttons' => array('submit', 'delete'))
      );
      $form['xmlsitemap']['xmlsitemap_user_role_priority'] = array(
        '#type' => 'select',
        '#title' => t('Default priority'),
        '#description' => t("The priority of all a user's roles will be added together to set the user's default priority. If all role priorities are left at default, the user's default priority will be %priority.", array('%priority' => $options[variable_get('xmlsitemap_user_default_priority', '0.5')])),
        '#default_value' => $priority,
        '#options' => $options,
      );
      $form['#submit'][] = 'xmlsitemap_user_form_submit';
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function xmlsitemap_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($category != 'account') {
        return array();
      }
    case 'register':
      $priority = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_user}
        WHERE uid = %d", $account->uid)
      );
      if (!isset($form['xmlsitemap'])) {
        $form['xmlsitemap'] = array(
          '#type' => 'fieldset',
          '#title' => t('XML site map'),
          '#collapsible' => TRUE,
          '#access' => user_access('override profile priority') || user_access('administer users'),
          '#weight' => 7,
        );
      }
      $options = xmlsitemap_priority_options('both');
      if (isset($account->roles)) {
        $roles = array_keys($account->roles);
        $default = db_fetch_object(
          db_query("SELECT MIN(priority) AS min, SUM(priority) AS sum
            FROM {xmlsitemap_user_role}
            WHERE rid IN (". db_placeholders($roles, 'varchar') .")",
            $roles
          )
        );
      }
      if (isset($default->min) && isset($default->sum)) {
        $default_priority = $default->min < 0 ? -1.0 : round(min($default->sum, 1), 1);
      }
      else {
        $default_priority = variable_get('xmlsitemap_user_default_priority', 0.5);
      }
      $form['xmlsitemap']['xmlsitemap_user_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('The default priority is %priority.', array('%priority' => $options[(string)$default_priority])),
        '#default_value' => $priority !== FALSE ? $priority : -2.0,
        '#options' => $options,
        '#access' => user_access('override profile priority') || user_access('administer users'),
      );
      return $form;
    case 'insert':
      $row = new stdClass();
      $row->uid = $account->uid;
      $row->changed = time();
      $row->priority_override = $edit['xmlsitemap_user_priority'];
      drupal_write_record('xmlsitemap_user', $row);
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'update':
      if (($result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_user} WHERE uid = %d", $account->uid))) === FALSE) {
        $row = new stdClass();
        $row->uid = $account->uid;
        $row->changed = time();
      }
      else {
        $row = $result;
        $row->previously_changed = $row->changed;
        $row->changed = time();
      }
      if ($edit['xmlsitemap_user_priority'] != -2.0) {
        $row->priority_override = $edit['xmlsitemap_user_priority'];
      }
      drupal_write_record('xmlsitemap_user', $row, $result !== FALSE ? 'uid' : NULL);
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_user} WHERE uid = %d", $account->uid);
      xmlsitemap_update_sitemap();
      break;
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_user_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: User') .'</dt>'.
    '<dd>'. t('The module adds user profiles to the site map. The <em>anonymous user</em> role must have permission to access user profiles on the <a href="@access">access control page</a>. You can change the default user priority on the <a href="@user_settings">user settings</a> page. The <a href="@user">user role priority</a> will override the default user priority. You can override both the default priority and the role priority when you add or edit a user.', array('@access' => url('admin/user/access'), '@user_settings' => url('admin/user/settings'), '@user_role' => url('admin/user/roles'))) .'</dd>';
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Form submit function.
 */
function xmlsitemap_user_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $form_id = $form_values['form_id'];
  if ($form_id == 'user_admin_settings') {
    xmlsitemap_update_sitemap();
  }
  elseif ($form_id == 'user_admin_role') {
    if ($form_values['op'] == t('Delete role')) {
      $priority = db_result(db_query("SELECT priority FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']));
      db_query("DELETE FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']);
      if ($priority !== FALSE) {
        xmlsitemap_update_sitemap();
      }
    }
    elseif ($form_values['op'] == t('Save role')) {
      $row = new stdClass();
      $row->rid = $form_values['rid'];
      $row->priority = $form_values['xmlsitemap_user_role_priority'];
      drupal_write_record('xmlsitemap_user_role', $row, $priority !== FALSE ? 'rid' : NULL);
      xmlsitemap_update_sitemap();
    }
  }
}

/*****************************************************************************
 * Private functions - database batch operation.
 ****************************************************************************/

/**
 * @} End of "addtogroup xmlsitemap".
 */
