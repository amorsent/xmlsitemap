<?php
// $Id$

/**
 * @file Adds user profiles to the site map.
 */

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_user_xmlsitemap_links($type = NULL, $excludes = array()) {
  $links = array();
  if (!isset($type) && user_access('access user profiles')) {
    $links = _xmlsitemap_user_links();
    $links = array_merge($links, module_invoke_all('xmlsitemap_links', 'user'));
    $links = array_merge($links, module_invoke_all('gsitemap', 'user'));
    if (!empty($links)) {
      foreach ($links as $key => $link) {
        $uid[$key] = $link['uid'];
        $loc[$key] = $link['#loc'];
      }
      array_multisort($uid, $loc, $links);
    }
  }
  return $links;
}

/**
 * Get user profile links.
 * @return An array of links. Each link is an array containing the XML
 * values for a site map URL.
 */
function _xmlsitemap_user_links() {
  $links = array();
  $result = db_query("
    SELECT u.uid, xu.last_changed, xu.previously_changed, xu.priority_override, SUM(xur.priority) as priority, ua.dst AS alias
    FROM {users} u
    LEFT JOIN {users_roles} ur ON ur.uid = u.uid
    LEFT JOIN {xmlsitemap_user_role} xur ON xur.rid = ur.rid
    LEFT JOIN {xmlsitemap_user} xu ON xu.uid = u.uid
    LEFT JOIN {url_alias} ua ON ua.pid = xu.pid
    WHERE (xu.priority_override IS NULL OR xu.priority_override >= 0)
    AND u.uid <> %d
    GROUP BY u.uid HAVING MIN(xur.priority) <> -1
  ", _xmlsitemap_user_frontpage());
  while ($user = db_fetch_object($result)) {
    $age = time() - $user->last_changed;
    $interval = empty($user->previously_changed) ? 0 : $user->last_changed - $user->previously_changed;
    $links[] = array(
      'uid' => $user->uid,
      '#loc' => xmlsitemap_url("user/$user->uid", $user->alias, NULL, NULL, TRUE),
      '#lastmod' => $user->last_changed,
      '#changefreq' => max($age, $interval),
      '#priority' => _xmlsitemap_user_priority($user),
    );
  }
  return $links;
}

/**
 * Get the uid of the front page profile.
 */
function _xmlsitemap_user_frontpage() {
  static $uid;
  if (!isset($uid)) {
    $uid = 0;
    $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
    if (count($frontpage == 2) && $frontpage[0] == 'user' && is_numeric($frontpage[1])) {
      $uid = $frontpage[1];
    }
  }
  return $uid;
}

/**
 * Calculate the priority of a user profile.
 * @param $user: A user object
 * @return A number between 0 and 1, or -1
 */
function _xmlsitemap_user_priority($user) {
  $priority = $user->priority_override;
  if (!isset($user->priority_override)) {
    $priority = min($user->priority, 0.9);
  }
  return $priority;
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_user_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'user_admin_role':
      $form['xmlsitemap_user_role_priority'] = array(
        '#type' => 'select',
        '#title' => t('Default site map priority'),
        '#default_value' => db_result(db_query("SELECT priority FROM {xmlsitemap_user_role} WHERE rid = %d", $form['rid']['#value'])),
        '#options' => xmlsitemap_priority_options('exclude'),
        '#description' => t('This number will be added to the priority of this user role.'),
      );
      $form['submit']['#weight'] = 1;
      $form['delete']['#weight'] = 1;
      $form['#submit']['_xmlsitemap_user_role_update'] = array();
      break;
  }
}

/**
 * Update the site map if a user role is deleted.
 */
function _xmlsitemap_user_role_update($form_id, $form_values) {
  $priority = db_result(db_query("SELECT priority FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']));
  if ($form_values['op'] == t('Delete role')) {
    db_query("DELETE FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']);
    if ($priority > 0 || $priority < 0) {
      xmlsitemap_update_sitemap();
    }
  }
  elseif ($form_values['xmlsitemap_user_role_priority'] != $priority) {
    db_query("UPDATE {xmlsitemap_user_role} SET priority = %f WHERE rid = %d", $form_values['xmlsitemap_user_role_priority'], $form_values['rid']);
    xmlsitemap_update_sitemap();
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_user_perm() {
  return array('override profile priority');
}

/**
 * Implementation of hook_user().
 */
function xmlsitemap_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      $priority = db_result(db_query("SELECT priority_override FROM {xmlsitemap_user} WHERE uid = %d", $account->uid));
      if (user_access('override profile priority')) {
        $form['xmlsitemap_user'] = array(
          '#type' => 'fieldset',
          '#title' => t('Site map settings'),
          '#collapsible' => TRUE,
          '#weight' => 7,
        );
        $options = xmlsitemap_priority_options('both');
        $default = db_fetch_object(db_query("
          SELECT MIN(priority) AS min, SUM(priority) AS sum FROM {xmlsitemap_user_role}
          WHERE rid IN (". implode(', ', array_keys($account->roles)) .")
        "));
        $default = $default->min < 0 ? -1 : min($default->sum, 0.9);
        $form['xmlsitemap_user']['xmlsitemap_user_priority'] = array(
          '#type' => 'select',
          '#title' => t('Site map priority'),
          '#default_value' => isset($priority) ? $priority : 'NULL',
          '#options' => $options,
          '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
        );
      }
      else {
        $form['xmlsitemap_user_priority'] = array('#type' => 'value', '#value' => isset($priority) ? $priority : 'NULL');
      }
      return $form;
    case 'submit':
      $edit['pid'] = db_result(db_query("SELECT pid FROM {url_alias} WHERE src = '%s'", "user/$account->uid"));
      break;
    case 'insert':
      $pid = empty($edit['pid']) ? 'NULL' : $edit['pid'];
      $priority = isset($edit['xmlsitemap_user_priority']) ? $edit['xmlsitemap_user_priority'] : 'NULL';
      db_query("
        INSERT INTO {xmlsitemap_user} (uid, pid, last_changed, priority_override) VALUES (%d, %d, %d, %s)
      ", $account->uid, $pid, time(), $priority);
      $edit['pid'] = NULL;
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'update':
      $pid = empty($edit['pid']) ? 'NULL' : $edit['pid'];
      $priority = isset($edit['xmlsitemap_user_priority']) ? $edit['xmlsitemap_user_priority'] : 'NULL';
      db_query("
        UPDATE {xmlsitemap_user}
        SET pid = %s, last_changed = %d, previously_changed = last_changed, priority_override = %s
        WHERE uid = %d
      ", $pid, time(), $priority, $account->uid);
      $edit['pid'] = NULL;
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_user} WHERE uid = %d", $account->uid);
      xmlsitemap_update_sitemap();
      break;
  }
}

