<?php
// $Id$

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_schema() {
  $schema['xmlsitemap'] = array(
    'description' => t('The base table for xmlsitemap.'),
    'fields' => array(
      'loc' => array(
        'description' => t('The path of this node.'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'lastmod' => array(
        'description' => t('Last change time.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'changefreq' => array(
        'description' => t('The frequency of the changes.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'description' => t('The priority of this node in the sitemap.'),
        'type' => 'float',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('loc'),
  );

  return $schema;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6000() {
  $ret = array();
  // Drop  unused tables.
  if (db_table_exists('xmlsitemap_additional')) {
    db_drop_table($ret, 'xmlsitemap_additional');
  }
  // Remove unused variables.
  if (db_result(db_query("SELECT COUNT(*) FROM {variable} WHERE name = 'xmlsitemap\_%'"))) {
    $ret[] = update_sql("DELETE FROM {variable} WHERE name = 'xmlsitemap\_%'");
  }
  // Remove temporary files created by previous versions.
  $path = file_directory_path() .'/xmlsitemap';
  if ($dir = @opendir($path)) {
    while (($file = readdir($dir)) !== FALSE) {
      if ($file != '.' && $file != '..') {
        unlink("$path/$file");
      }
    }
    closedir($dir);
    rmdir($path);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DELETE TEMPORARY FILES',
    );
  }
  if (!db_table_exists('xmlsitemap')) {
    $schema = xmlsitemap_schema();
    db_create_table($ret, 'xmlsitemap', $schema['xmlsitemap']);
  }
  if ($GLOBALS['db_type'] == 'pgsql') {
    $ret[] = update_sql('CREATE OR REPLACE FUNCTION first(anyelement, anyelement) RETURNS anyelement AS \'SELECT COALESCE($1, $2);\' LANGUAGE \'sql\';');
    $result = @update_sql("DROP AGGREGATE first(anyelement)");
    if ($result['success']) {
      $ret[] = $result;
    }
    $ret[] = update_sql("CREATE AGGREGATE first(
      sfunc = first,
      basetype = anyelement,
      stype = anyelement
    );");
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6100() {
  return xmlsitemap_update_6000();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6101() {
  return xmlsitemap_update_6000();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6102() {
  return xmlsitemap_update_6000();
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_install() {
  // Create my tables.
  db_query("DELETE FROM {url_alias} WHERE dst LIKE 'sitemap%.xml'");
  drupal_install_schema('xmlsitemap');
  if ($GLOBALS['db_type'] == 'pgsql') {
    db_query('CREATE OR REPLACE FUNCTION first(anyelement, anyelement) RETURNS anyelement AS \'SELECT COALESCE($1, $2);\' LANGUAGE \'sql\';');
    @db_query("DROP AGGREGATE first(anyelement)");
    db_query("CREATE AGGREGATE first(
      sfunc = first,
      basetype = anyelement,
      stype = anyelement
    );");
  }
}

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_enable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_uninstall() {
  // Remove the used variables.
  db_query("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_%'");
  // Drop the tables.
  drupal_uninstall_schema('xmlsitemap');
}
