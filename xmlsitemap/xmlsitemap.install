<?php
// $Id$

/**
 * @file
 * Installation file for XML sitemap.
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_requirements().
 */
function xmlsitemap_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $requirements['xmlsitemap'] = array(
      'title' => t('XML sitemap'),
      'value' => t("!module_file/!module_revision !install_file/!install_revision", array('!module_file' => 'xmlsitemap.module', '!module_revision' =>_xmlsitemap_revision(), '!install_file' => 'xmlsitemap.install', '!install_revision' => preg_replace('/\$Rev[iI]sion:\s+(.*)\s+\$/iU', '$1', '$Revision$'))),
      'severity' => REQUIREMENT_OK,
    );
  }
  return $requirements;
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_schema() {
  $schema['xmlsitemap'] = array(
    'description' => 'The list of the links added to the sitemap.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'loc' => array(
        'description' => 'The relative URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'module' => array(
        'description' => 'The module handling this link.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of link.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'id' => array(
        'description' => 'The ID associated with the link.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => 'The second ID associated with the link.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The language associated with the link.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'previously_changed' => array(
        'description' => 'The Unix timestamp of the previous change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp of the last change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changefreq' => array(
        'description' => 'The frequency of the changes.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'description' => 'The priority of the link in the sitemap.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.5,
      ),
      'priority_override' => array(
        'description' => 'The value that override the normal priority.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      ),
    ),
    'indexes' => array(
      'link_module' => array(array('module', 25)),
      'link_language' => array('language'),
      'link_changed' => array('changed'),
      'link_priority' => array('priority'),
    ),
    'primary key' => array('lid'),
  );
  $schema['xmlsitemap_additional'] = array(
    'description' => 'The list of additional links added to the sitemap.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'The relative path of the link.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'The weight of the link in the list.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array('rel_path' => array('path')),
    'primary key' => array('lid'),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_install() {
  drupal_install_schema('xmlsitemap');
  variable_set('xmlsitemap_chunk_size', 1000);
  db_query("UPDATE {system} SET weight = 5 WHERE name = 'xmlsitemap'");
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6000() {
  $ret = array();
  if ($GLOBALS['db_type'] == 'pgsql') {
    $result = @update_sql("DROP AGGREGATE first(anyelement)");
    if ($result['success']) {
      $ret[] = $result;
    }
    $result = @update_sql('DROP FUNCTION IF EXISTS first(anyelement, anyelement);');
    if ($result['success']) {
      $ret[] = $result;
    }
  }
  if (db_table_exists('xmlsitemap_additional')) {
    db_drop_table($ret, 'xmlsitemap_additional');
  }
  _xmlsitemap_update_schema($ret);
  if (module_exists('xmlsitemap_file')) {
    module_disable(array('xmlsitemap_file'));
  }
  if (module_exists('xmlsitemap_helper')) {
    module_disable(array('xmlsitemap_helper'));
  }
  if (module_exists('xmlsitemap_menu')) {
    module_disable(array('xmlsitemap_menu'));
    drupal_set_message(t('XML sitemap menu has been deprecated, and it is not anymore included in <em>XML sitemap</em>. It seems you have not correctly copied the new files, or you have two different sets of files in two different directories. Verify that you correctly copied the new files, before to proceed.'), 'error', FALSE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DISABLE XMLSITEMAP_MENU',
    );
  }
  $ret[] = update_sql("DELETE FROM {system} WHERE name IN ('xmlsitemap_file', 'xmlsitemap_helper', 'xmlsitemap_menu') AND type = 'module'");
  if (db_table_exists('xmlsitemap_file')) {
    db_drop_table($ret, 'xmlsitemap_file');
  }
  $ret[] = update_sql("DELETE FROM {menu_links} WHERE menu_name = 'menu-xmlsitemap'");
  $ret[] = update_sql("DELETE FROM {menu_custom} WHERE menu_name = 'menu-xmlsitemap'");
  $ret[] = update_sql("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_menu\_%'");
  if (!variable_get('menu_rebuild_needed', FALSE)) {
    variable_set('menu_rebuild_needed', TRUE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'UPDATE MENU CALLBACKS',
    );
  }
  module_rebuild_cache();
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE MODULES LIST',
  );
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6100() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6101() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6102() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6103() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6104() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6105() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6106() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6107() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6108() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6109() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6110() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6111() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6112() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6113() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6114() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6115() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6116() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6117() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6118() {
  variable_set('xmlsitemap_cron_submit_frequency', variable_get('xmlsitemap_cron_submit', FALSE) ? 1 : -1);
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE MODULE SETTINGS'
  );
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6119() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6120() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6121() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6122() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6123() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6124() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6125() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6126() {
  $ret[] = update_sql("DELETE FROM {xmlsitemap}");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6127() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6128() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6129() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6130() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6131() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6132() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6133() {
  $ret = array();
  if ($GLOBALS['db_type'] == 'pgsql') {
    $result = @update_sql("DROP AGGREGATE first(anyelement)");
    if ($result['success']) {
      $ret[] = $result;
    }
    $result = @update_sql('DROP FUNCTION IF EXISTS first(anyelement, anyelement);');
    if ($result['success']) {
      $ret[] = $result;
    }
  }
  $ret[] = update_sql("UPDATE {system} SET weight = 5 WHERE name = 'xmlsitemap'");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6134() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6135() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6136() {
  xmlsitemap_flag_sitemap();
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE SITEMAP',
  );
  $ret[] = update_sql("DELETE FROM {variable} WHERE name = 'xmlsitemap_update_sitemap_request'");
  variable_set('xmlsitemap_chunk_size', 1000);
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE XMLSITEMAP_CHUNK_SIZE'
  );
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6137() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6138() {
  $ret = array();
  $result = array();
  @db_drop_index($result, 'xmlsitemap', 'link_type');
  if ($result[0]['success']) {
    $ret[] = $result[0];
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6139() {
  $ret[] = update_sql("DELETE FROM {system} WHERE name IN ('xmlsitemap_file', 'xmlsitemap_helper') AND type = 'module'");
  if (db_table_exists('xmlsitemap_file')) {
    db_drop_table($ret, 'xmlsitemap_file');
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6140() {
  $ret = array();
  if (module_exists('xmlsitemap_term')) {
    module_disable(array('xmlsitemap_term'));
    drupal_set_message(t('XML sitemap term has been deprecated in favor of XML sitemap taxonomy; enable it in the <a href="@modules">modules page.', array('@modules' => url('admin/build/modules'))), 'status', FALSE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DISABLE XMLSITEMAP_TERM',
    );
  }
  if (function_exists('rules_clear_cache')) {
    rules_clear_cache();
    $ret[] = array(
      'success' => TRUE,
      'query' => 'CLEAR RULES CACHE',
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6141() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6142() {
  $ret = array();
  if (!variable_get('menu_rebuild_needed', FALSE)) {
    variable_set('menu_rebuild_needed', TRUE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'UPDATE MENU CALLBACKS',
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6143() {
  cache_clear_all();
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE DRUPAL CACHE',
  );
}

function xmlsitemap_update_6144() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6145() {
  if (module_exists('xmlsitemap_menu')) {
    module_disable(array('xmlsitemap_menu'));
    drupal_set_message(t('XML sitemap menu has been deprecated, and it is not anymore included in <em>XML sitemap</em>. It seems you have not correctly copied the new files, or you have two different sets of files in two different directories. Verify that you correctly copied the new files, before to proceed.'), 'error', FALSE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DISABLE XMLSITEMAP_MENU',
    );
  }
  $ret[] = update_sql("DELETE FROM {system} WHERE name = 'xmlsitemap_menu' AND type = 'module'");
  $ret[] = update_sql("DELETE FROM {menu_links} WHERE menu_name = 'menu-xmlsitemap'");
  $ret[] = update_sql("DELETE FROM {menu_custom} WHERE menu_name = 'menu-xmlsitemap'");
  $ret[] = update_sql("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_menu\_%'");
  module_rebuild_cache();
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE MODULES LIST',
  );
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6146() {
  $ret = array();
  _xmlsitemap_update_schema($ret);
  return $ret;
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_uninstall() {
  drupal_uninstall_schema('xmlsitemap');
  db_query("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_%'");
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Update the database tables to the latest schema.
 * @param $ret
 *   The array used to keep the result of each executed query.
 */
function _xmlsitemap_update_schema(&$ret) {
  $schema = xmlsitemap_schema();
  foreach ($schema as $table => $definition) {
    if (db_table_exists($table)) {
      $result = array();
      @db_drop_primary_key($result, $table);
      if ($result[0]['success']) {
        $ret[] = $result[0];
      }
      if (isset($definition['unique keys'])) {
        foreach ($definition['unique keys'] as $key => $info) {
          $result = array();
          @db_drop_unique_key($result, $table, $key);
          if ($result[0]['success']) {
            $ret[] = $result[0];
          }
        }
      }
      if (isset($definition['indexes'])) {
        foreach ($definition['indexes'] as $key => $info) {
          $result = array();
          @db_drop_index($result, $table, $key);
          if ($result[0]['success']) {
            $ret[] = $result[0];
          }
        }
      }
      foreach ($definition['fields'] as $field => $info) {
        if (db_column_exists($table, $field)) {
          db_change_field($ret, $table, $field, $field, $info);
        }
        else {
          db_add_field($ret, $table, $field, $info);
        }
      }
      if (isset($definition['primary key'])) {
        $result = array();
        @db_add_primary_key($result, $table, $definition['primary key']);
        if ($result[0]['success']) {
          $ret[] = $result[0];
        }
      }
      if (isset($definition['unique keys'])) {
        foreach ($definition['unique keys'] as $key => $info) {
          $result = array();
          @db_add_unique_key($result, $table, $key, $info);
          if ($result[0]['success']) {
            $ret[] = $result[0];
          }
        }
      }
      if (isset($definition['indexes'])) {
        foreach ($definition['indexes'] as $key => $info) {
          $result = array();
          @db_add_index($result, $table, $key, $info);
          if ($result[0]['success']) {
            $ret[] = $result[0];
          }
        }
      }
    }
    else {
      db_create_table($ret, $table, $definition);
    }
  }
}
