<?php
// $Id$

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (!variable_get('site_offline', 0) && variable_get('xmlsitemap_cron_submit_frequency', -1) >= 0 && variable_get('xmlsitemap_changed', FALSE)) {
    $count = variable_get('xmlsitemap_cron_submit_delay', -1);
    if (--$count <= 0) {
      _xmlsitemap_ping();
      $count = variable_get('xmlsitemap_cron_submit_frequency', -1);
    }
    variable_set('xmlsitemap_cron_submit_delay', $count);
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  if (variable_get('site_offline', 0) || arg(0) == 'batch') {
    return;
  }
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
    $link_count = _xmlsitemap_link_count();
    if ($link_count / $chunk_size > 1) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    if (isset($items[arg(0)]) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      $message = array_shift(module_invoke_all('xmlsitemap_engines', 'access'));
      if (!isset($message)) {
        $message = 'Sitemap downloaded by @user-agent at @address.';
      }
      watchdog('xmlsitemap', $message,
        array(
          '@user-agent' => $_SERVER['HTTP_USER_AGENT'],
          '@address' => $_SERVER['REMOTE_ADDR'],
        )
      );
    }
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
      $output = t('Configure the XML site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description';
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the XML site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_sitemap'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Site map',
    'description' => 'Configure the XML site map.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML site map to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_engines'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['sitemap.xml'] = array(
    'title' => 'Site map index',
    'page callback' => 'xmlsitemap_output',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if ($link_count / $chunk_size > 1) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Site map !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
      );
    }
  }
  return $items;
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Menu callback; display the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map is being requested.
 *  If not set and there is more than one chunk, display the site map index.
 */
function xmlsitemap_output($chunk = NULL) {
  drupal_set_header('Content-type: text/xml; charset=utf-8');
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      _xmlsitemap_output_chunk($chunk);
    }
    else {
      drupal_not_found();
    }
  }
  else {
    if ($link_count > $chunk_size) {
      print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
      print '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
      print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
      print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
      print '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n";
      $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
      $link_count = _xmlsitemap_link_count();
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        print '  <sitemap>'."\n";
        print '    <loc>'. url("sitemap$chunk.xml", array('absolute' => TRUE)) .'</loc>'."\n";
        if ($chunk < $link_count / $chunk_size) {
          $from = $chunk * $chunk_size;
          if (!empty($chunk_size)) {
            // Select only the links added by enabled modules.
            $changed = db_result(db_query_range("SELECT changed FROM {xmlsitemap} xsm
              INNER JOIN {xmlsitemap_modules} xm ON xm.mid = xsm.mid
              INNER JOIN {system} sm ON xm.name = xsm.module
              WHERE sm.type = 'module'
                AND sm.status = 1
              ORDER BY changed DESC, url",
              $from, $chunk_size)
            );
            if ($changed !== FALSE) {
              print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $changed) .'</lastmod>'."\n";
            }
          }
        }
        print '  </sitemap>'."\n";
      }
      print '</sitemapindex>';
    }
    else {
      _xmlsitemap_output_chunk();
    }
  }
  drupal_page_footer();
  exit;
}

/**
 * Menu callback; return the search engine settings form.
 */
function xmlsitemap_settings_engines() {
  xmlsitemap_show_admin_messages();
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
    '#collapsible' => TRUE,
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access'),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
  );
  $form['submission']['xmlsitemap_cron_submit_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Frequency of cron site map submission'),
    '#description' => t('The rate at which the site map is submitted to the search engines over the times the cron maintenance tasks are executed.'),
    '#default_value' => variable_get('xmlsitemap_cron_submit_frequency', -1),
    '#options' => array(
      '10' => t('Once every ten times'),
      '9' => t('Once every nine times'),
      '8' => t('Once every eight times'),
      '7' => t('Once every seven times'),
      '6' => t('Once every six times'),
      '5' => t('Once every five times'),
      '4' => t('Once every four times'),
      '3' => t('Once every three times'),
      '2' => t('Once every two times'),
      '1' => t('Always'),
      '-1' => t('Never'),
    ),
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'xmlsitemap_settings_engines_submit';
  drupal_alter('xmlsitemap_engine_settings', $form);
  return $form;
}

/**
 * Submission function for the engines settings form.
 */
function xmlsitemap_settings_engine_submit($form, &$form_state) {
  menu_rebuild();
}

/**
 * Menu callback; return the site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  xmlsitemap_show_admin_messages();
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
  );
  $form['general']['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 200),
    '#size' => 10,
    '#maxlength' => 5,
  );
  $form['general']['priority'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priority'),
    '#collapsible' => TRUE,
  );
  $form['general']['priority']['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#description' => t('This is the absolute priority for the front page.'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_priority_options(),
  );
  $form = system_settings_form($form);
  $form['#submit'][] = 'xmlsitemap_settings_sitemap_submit';
  $form['#validate'][] = 'xmlsitemap_settings_sitemap_validate';
  drupal_alter('xmlsitemap_sitemap_settings', $form);
  return $form;
}

/**
 * Validate the site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form, &$form_state) {
  $chunk_size = $form_state['values']['xmlsitemap_chunk_size'];
  if (!is_numeric($chunk_size) || $chunk_size <= 0 || $chunk_size > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('The number of links in a site map chunk must be a number between 1, and 50,000 (1 and 50,000 included).'));
  }
}

/**
 * Submission function for the site map settings form.
 */
function xmlsitemap_settings_sitemap_submit($form, &$form_state) {
  if (($chunk_size = $form_state['values']['xmlsitemap_chunk_size']) != variable_get('xmlsitemap_previous_chunk_size', -1)) {
    menu_rebuild();
    variable_set('xmlsitemap_previous_chunk_size', $chunk_size);
  }
}

/*****************************************************************************
 * Public functions - messages shown in the administration page.
 ****************************************************************************/

/**
 * Add a message to the list of the messages shown in the module administration
 * pages.
 * @param $message
 *  The text of the message to be shown.
 * @param $type
 *  The type of the message, chosen between 'status', 'warning', and 'error';
 *  the default type is 'status'.
 */
function xmlsitemap_add_admin_message($message, $type = 'status') {
  if ($message) {
    switch ($type) {
      case 'error':
        $var = 'xmlsitemap_admin_error_messages';
        break;
      case 'warning':
        $var = 'xmlsitemap_admin_warning_messages';
        break;
      case 'status':
        $var = 'xmlsitemap_admin_status_messages';
        break;
    }
    if (isset($var)) {
      $messages = variable_get($var, array());
      array_unshift($messages, $message);
      variable_set($var, $messages);
    }
  }
}

/**
 * Show all the messages set with xmlsitemap_add_admin_message().
 * The function must be called at the beginning of every menu callback function
 * that creates an XML Sitemap administration page.
 */
function xmlsitemap_show_admin_messages() {
  $types = array(
    'error' => 'xmlsitemap_admin_error_messages',
    'warning' => 'xmlsitemap_admin_warning_messages',
    'status' => 'xmlsitemap_admin_status_messages',
  );
  foreach ($types as $type => $var) {
    $messages = variable_get($var, array());
    if (count($messages)) {
      foreach ($messages as $message) {
        drupal_set_message($message, $type);
      }
      variable_set($var, array());
    }
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Return the ID associated with the module.
 * If ID for the module doesn't exist, then it creates a new ID.
 * @param $module
 *  The name of a module handing the rows of the xmlsitemap table (without
 *  the '.module' extension).
 * @return
 *  The ID for the module, or FALSE in case of error.
 */
function xmlsitemap_get_module_id($module) {
  if (($mid = db_result(db_query("SELECT mid FROM {xmlsitemap_modules} WHERE name = '%s'", $module))) === FALSE) {
    $info = new stdClass();
    $info->mid = 0;
    $info->name = $module;
    if (drupal_write_record('xmlsitemap_modules', $info) === FALSE) {
      return FALSE;
    }
    $mid = $info->mid;
  }
  return $mid;
}

/**
 * Get an array of site map priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Save a link data into the xmlsitemap table.
 * @param &$link
 *   The object containing the data to be saved in the database.
 *  @param $update
 *    TRUE if the data is already present in the database.
 */
function xmlsitemap_save_link(&$link, $update = FALSE) {
  drupal_write_record('xmlsitemap', $link, empty($update) ? NULL : 'lid');
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Return the number of links present in xmlsitemap table.
 */

function _xmlsitemap_link_count() {
  // Count only the links added by enabled modules.
  return db_result(db_query("SELECT COUNT(*)
    FROM {xmlsitemap} xsm
    INNER JOIN {xmlsitemap_modules} xm ON xm.mid = xsm.mid
    INNER JOIN {system} sm ON sm.name = xm.name
    WHERE xsm.enabled = 1
      AND sm.type = 'module'
      AND sm.status = 1"
  ));
}

/**
 * Display a chunk of the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map to display.
 */
function _xmlsitemap_output_chunk($chunk = 0) {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $start = $chunk * $chunk_size;
  // Select only the links added by enabled modules.
  $links = db_query_range("SELECT *, xm.name AS module
    FROM {xmlsitemap} xsm
    INNER JOIN {xmlsitemap_modules} xm ON xm.mid = xsm.mid
    INNER JOIN {system} sm ON sm.name = xm.name
    WHERE xsm.enabled = 1
      AND sm.type = 'module'
      AND sm.status = 1
    ORDER BY changed DESC, changefreq, priority DESC, url",
    $start , $chunk_size
  );
  while ($link = db_fetch_object($links)) {
    if ($link->module && function_exists($link->module .'_url')) {
      $function = $link->module .'_url';
      $url = $function($link->loc, $link->type);
    }
    else {
      $url = url($link->url, array('absolute' => TRUE));
    }
    print '  <url>'."\n";
    print '    <loc>'. check_url($url) .'</loc>'."\n";
    if ($link->changed != 0) {
      print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link->changed) .'</lastmod>'."\n";
    }
    if ($link->changefreq != 0) {
      print '    <changefreq>'. xmlsitemap_frequency($link->changefreq) .'</changefreq>'."\n";
    }
    if ($link->priority >= 0 && $link->priority <= 1) {
      print '    <priority>'. number_format($link->priority, 1) .'</priority>'."\n";
    }
    print '  </url>'."\n";
  }
  print '</urlset>';
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
