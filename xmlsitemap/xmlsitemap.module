<?php
// $Id$

/**
 * @file
 * Creates a sitemap compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Public constants.
 ****************************************************************************/

/**
 * The timestamp of server request to avoid repeatedly generating value.
 */
if (!defined('REQUEST_TIME')) {
  if (isset($_SERVER['REQUEST_TIME'])) {
    define('REQUEST_TIME', $_SERVER['REQUEST_TIME']);
  }
  else {
    define('REQUEST_TIME', time());
  }
}

/**
 * The date format used in the sitemap.
 */
define('XMLSITEMAP_DATE_W3C', 'Y-m-d\TH:i:s\Z');

/**
 * The flag set when a sitemap link is not enabled.
 */
define('XMLSITEMAP_LINK_DISABLED', 1);


/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
    case 'path_admin_form':
    case 'pathauto_admin_settings':
    case 'system_clean_url_settings':
      $form['#submit'][] = 'xmlsitemap_settings_submit';
      break;
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
    case 'admin/settings/xmlsitemap/additional':
    case 'admin/settings/xmlsitemap/engines':
      $output = t('The sitemap is located at @sitemap.', array('@sitemap' => url('sitemap.xml', array('absolute' => TRUE))));
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML sitemap automatically creates a sitemap that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML sitemap module adds only the front page of your site to the sitemap. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $description = module_invoke($module, 'xmlsitemap_description');
        if (!empty($description)) {
          $optional .= $description;
        }
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in sitemap</em> excludes a link from the sitemap.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer site configuration');
  $access_content = array('access content');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML sitemap',
    'description' => 'Configure the XML sitemap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings'),
    'access arguments' => $access_config,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Sitemap',
    'description' => 'Configure the XML sitemap.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional'] = array(
    'title' => 'Additional links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/xmlsitemap/additional/add'] = array(
    'title' => 'Add link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_edit'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/delete/%'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_delete_confirm', 5),
    'access arguments' => $access_config,
    'parent' => 'admin/settings/xmlsitemap/additional/list',
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/edit/%xmlsitemap_link'] = array(
    'title' => 'Edit link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_edit', 5),
    'access arguments' => $access_config,
    'parent' => 'admin/settings/xmlsitemap/additional/list',
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/tools'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools_basic'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/tools/basic'] = array(
    'title' => 'Basic',
    'description' => 'Sitemap tools.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/tools/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools_settings'),
    'access arguments' => $access_config,
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['sitemap.xml'] = array(
    'title' => 'Sitemap index',
    'page callback' => 'xmlsitemap_output',
    'access arguments' => $access_content,
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.pages.inc',
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
  if (($link_count = xmlsitemap_link_count()) && $link_count > $chunk_size) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Sitemap !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access arguments' => $access_content,
        'type' => MENU_CALLBACK,
        'file' => 'xmlsitemap.pages.inc',
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_perm() {
  return array('override node settings', 'override profile settings');
}

/**
 * Implementation of hook_robotstxt().
 */
function xmlsitemap_robotstxt() {
  return array("Sitemap: ". url('sitemap.xml', array('absolute' => TRUE)));
}

/**
 * Implementation of hook_theme().
 */
function xmlsitemap_theme() {
  return array(
    'xmlsitemap_additional_links' => array(
      'arguments' => array('form' => array()),
      'file' => 'xmlsitemap.admin.inc',
    )
  );
}

/**
 * Implementation of hook_xmlsitemap_operations().
 */
function xmlsitemap_xmlsitemap_operations() {
  return array(
    'delete_cache_files' => array(
      'label' => t('Delete the sitemap cache files'),
      'callback' => '_xmlsitemap_operation_delete_cache_files',
    ),
    'flag_sitemap' => array(
      'label' => t('Flag the sitemap as requiring update'),
      'callback' => '_xmlsitemap_operation_flag_sitemap',
    ),
  );
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_xmlsitemap_links() {
  $changefreq = variable_get('xmlsitemap_front_page_changefreq', 3600);
  $row = db_fetch_object(db_query("SELECT * FROM {xmlsitemap} WHERE type = 'frontpage' AND module = 'xmlsitemap'"));
  if ($row === FALSE) {
    $row = new stdClass();
    $row->module = 'xmlsitemap';
    $row->type = 'frontpage';
    $row->changed = REQUEST_TIME - $changefreq;
    $row->changefreq = $changefreq;
    $row->priority = variable_get('xmlsitemap_front_page_priority', 1);
  }
  else {
    $update = TRUE;
    if (REQUEST_TIME - $row->changed > $changefreq) {
      $row->changed = REQUEST_TIME - $changefreq;
      $row->changefreq = $changefreq;
    }
  }
  drupal_write_record('xmlsitemap', $row, isset($update) ? 'lid' : NULL);
  $weight = db_fetch_object(db_query("SELECT MIN(weight) AS min, MAX(weight) AS max FROM {xmlsitemap_additional}"));
  $row = new stdClass();
  $row->module = 'xmlsitemap';
  $row->type = 'additional_link';
  foreach (_xmlsitemap_additional_links_list() as $id => $link) {
    $row->loc = $link->path;
    if (isset($weight->min) && isset($weight->max) && $weight->min != $link->weight && $weight->max != $link->weight) {
      $row->priority = 1.0 - min(max(round(($link->weight - $weight->min) / $weight->max - $weight->min, 1), 0.0), 1.0);
    }
    else {
      $row->priority = 0.5;
    }
    $old_row = db_fetch_object(db_query("SELECT lid, type, priority FROM {xmlsitemap} WHERE loc = '%s'", $row->loc));
    if ($old_row === FALSE) {
      drupal_write_record('xmlsitemap', $row);
    }
    elseif ($old_row->type == 'xmlsitemap' && $old_row->priority != $row->priority) {
      $row->lid = $old_row->lid;
      drupal_write_record('xmlsitemap', $row, 'lid');
    }
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Return the API identifier currently inplemented in the module.
 * @return
 *   A string identifying the current API version.
 */
function xmlsitemap_api() {
  return '1.0';
}

/**
 * Create the identifier that univocally identifies the sitemap cache files
 * for a specific domain, and for a specific language.
 * @return
 *  An array of two item; the first item is related with the domain, the
 *  second item is related with the language.
 */
function xmlsitemap_cache_id() {
  static $id;
  global $base_url, $language;
  if (!isset($id)) {
    $id[] = substr(md5($base_url), 0, 8);
    $id[] = $language->language;
  }
  return $id;
}

/**
 * Return the array for the cron limit options.
 */
function xmlsitemap_cron_options() {
  return array(
    '400' => t('400'),
    '300' => t('300'),
    '200' => t('200'),
    '150' => t('150'),
    '100' => t('100'),
    '75' => t('75'),
    '50' => t('50'),
    '25' => t('25'),
    '20' => t('20'),
    '15' => t('15'),
    '10' => t('10'),
    '5' => t('5'),
    '-1' => t('0'),
  );
}

/**
 * Delete the cache file used for the sitemap content, and mark the sitemap as
 * changed.
 */
function xmlsitemap_delete_cache_files() {
  $result = TRUE;
  $id = xmlsitemap_cache_id();
  $files = file_scan_directory(
    variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap'),
    'xsm-'. $id[0] .'-.*\.xml', array('.', '..', 'CVS'), 0, FALSE
  );
  foreach ($files as $filename => $info) {
    $result = $result && file_delete($filename);
  }
  xmlsitemap_flag_sitemap();
  return $result;
}

/**
 * Mark the sitemap as changed, and the cache as needing update.
 */
function xmlsitemap_flag_sitemap() {
  if (!variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    variable_set('xmlsitemap_sitemap_is_changed', TRUE);
  }
  if (!variable_get('xmlsitemap_sitemap_needs_update', FALSE)) {
    variable_set('xmlsitemap_sitemap_needs_update', TRUE);
  }
}

/**
 * Return the number of links present in xmlsitemap table.
 */
function xmlsitemap_link_count() {
  static $link_count = 0;
  if (!$link_count) {
    if (!db_table_exists('xmlsitemap')) {
      watchdog('xmlsitemap', 'The <em>xmlsitemap</em> database table does not exist.', array(), WATCHDOG_ERROR);
    }
    else {
      $link_count = db_result(db_query("SELECT COUNT(*)". xmlsitemap_sitemap_query()));
    }
  }
  return $link_count;
}

/**
 * Load the additional link with the passed ID.
 * @param $lid
 *   The ID of the additional link to load from the database.
 * @return
 *   An additional link object, or FALSE.
 */
function xmlsitemap_link_load($lid) {
  if (($link = db_fetch_object(db_query("SELECT lid, path, weight FROM {xmlsitemap_additional} WHERE lid = %d", $lid))) == FALSE) {
    return FALSE;
  }
  return $link;
}

/**
 * Return an array of sitemap priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from sitemap.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in sitemap');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Change the tools settings form, and remove the placeholder item.
 */
function xmlsitemap_tools_settings_form(&$form) {
  if (isset($form['empty'])) {
    unset($form['empty']);
    $form = system_settings_form($form);
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_sitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Complete the query used to select rows from the xmlsitemap table.
 */
function xmlsitemap_sitemap_query() {
  global $language;
  $default = language_default();
  $language_query = "AND xsm.language IN ('". $language->language ."', '')";
  switch(variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE)) {
    case LANGUAGE_NEGOTIATION_NONE:
      $language_query = '';
      break;
    case LANGUAGE_NEGOTIATION_PATH_DEFAULT:
    case LANGUAGE_NEGOTIATION_PATH:
      if (variable_get('xmlsitemap_all_links_to_default_language', 0) && $language->language == $default->language) {
        $language_query = '';
      }
      break;
  }
  return "
    FROM {xmlsitemap} xsm
    INNER JOIN {system} s ON s.name = xsm.module
    WHERE s.type = 'module'
      AND s.status = 1
      $language_query
      AND (xsm.priority >= 0 AND xsm.priority <= 1)
    ";
}

/**
 * Return an array used to add additional form fields in the user form.
 */
function xmlsitemap_user_form_fieldset() {
  static $done = FALSE;
  $form = array();
  if (!$done) {
    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#title' => t('XML sitemap'),
      '#collapsible' => TRUE,
      '#access' => user_access('override profile settings') || user_access('administer users'),
      '#weight' => 7,
    );
    $done = TRUE;
  }
  return $form;
}

/*****************************************************************************
 * Private functions - sitemap operations.
 ****************************************************************************/

function _xmlsitemap_operation_delete_cache_files() {
  if (xmlsitemap_delete_cache_files()) {
    drupal_set_message(t('The sitemap cache files have been deleted.'), 'status', FALSE);
    watchdog('xmlsitemap', 'The sitemap cache files have been deleted.');
  }
  else {
    drupal_set_message(t('Some of the sitemap cache files have not been deleted.'), 'warning', FALSE);
    watchdog('xmlsitemap', 'Some of the sitemap cache files have not been deleted.', WATCHDOG_WARNING);
  }
}

function _xmlsitemap_operation_flag_sitemap() {
  xmlsitemap_flag_sitemap();
  drupal_set_message(t('The sitemap has been flagged as needing update.'), 'status', FALSE);
  watchdog('xmlsitemap', 'The sitemap has been flagged as needing update.');
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Return the list of all additional links created.
 */
function _xmlsitemap_additional_links_list() {
  static $links;
  if (!isset($links)) {
    $links = array();
    $result = db_query("SELECT lid, path, weight FROM {xmlsitemap_additional} ORDER BY weight ASC");
    while ($link = db_fetch_object($result)) {
      $links[$link->lid] = $link;
    }
  }
  return $links;
}

/**
 * Return the revision number as extracted from the CVS revision tag.
 */
function _xmlsitemap_revision() {
  return preg_replace('/\$Rev[iI]sion:\s+(.*)\s+\$/iU', '$1', '$Revision$');
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
