<?php
// $Id$

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Public constants.
 ****************************************************************************/

/**
 * The timestamp of server request to avoid repeatedly generating value.
 */
define('XMLSITEMAP_TIME', time());

/**
 * The flag set when a site map link is not enabled.
 */
define('XMLSITEMAP_LINK_DISABLED', 1);


/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_boot().
 */
function xmlsitemap_boot() {
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
    case 'path_admin_form':
    case 'pathauto_admin_settings':
    case 'system_clean_url_settings':
      $form['#submit'][] = 'xmlsitemap_settings_submit';
      break;
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
      $output = t('Configure the site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description';
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer site configuration');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the XML site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings'),
    'access arguments' => $access_config,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Site map',
    'description' => 'Configure the XML site map.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/tools'] = array(
    'title' => 'Tools',
    'description' => 'Site map tools.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['sitemap.xml'] = array(
    'title' => 'Site map index',
    'page callback' => 'xmlsitemap_output',
    'access callback' => '_xmlsitemap_anonymous_access',
    'type' => MENU_CALLBACK,
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
  $link_count = xmlsitemap_link_count();
  if ($link_count > $chunk_size) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Site map !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access callback' => '_xmlsitemap_anonymous_access',
        'type' => MENU_CALLBACK,
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_perm() {
  return array('by-pass the authored nodes check', 'override node settings', 'override profile settings');
}

/**
 * Implementation of hook_xmlsitemap_operations().
 */
function xmlsitemap_xmlsitemap_operations() {
  return array(
    'delete_cache_files' => array(
      'label' => t('Delete the site map cache files'),
      'callback' => 'xmlsitemap_delete_cache_files',
    ),
    'flag_sitemap' => array(
      'label' => t('Flag the site map as requiring update'),
      'callback' => 'xmlsitemap_flag_sitemap',
    ),
  );
}

/**
 * Menu callback; display the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map is being requested.
 *  If not set and there is more than one chunk, display the site map index.
 */
function xmlsitemap_output($chunk = NULL) {
  $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
  $link_count = xmlsitemap_link_count();
  if (($link_count / $chunk_size) > 1000) {
    $chunk_size = (integer) $link_count / 1000;
    if ($chunk_size != variable_get('xmlsitemap_chunk_size', 1000)) {
      variable_set('xmlsitemap_chunk_size', $chunk_size);
    }
  }
  if (isset($chunk) && !preg_match('/[0-9]+/', $chunk)) {
    drupal_not_found();
    exit();
  }
  $id = xmlsitemap_cache_id();
  if (variable_get('xmlsitemap_sitemap_needs_update', FALSE)) {
    variable_set('xmlsitemap_update_timestamp', XMLSITEMAP_TIME);
    db_query("DELETE FROM {xmlsitemap} WHERE type ='frontpage'");
    $row = new stdClass();
    $row->module = 'xmlsitemap';
    $row->type = 'frontpage';
    $changefreq = variable_get('xmlsitemap_front_page_changefreq', 3600);
    $row->changed = XMLSITEMAP_TIME - $changefreq;
    $row->changefreq = $changefreq;
    $row->priority = variable_get('xmlsitemap_front_page_priority', 1);
    drupal_write_record('xmlsitemap', $row);
    module_invoke_all('xmlsitemap_links');
    variable_set('xmlsitemap_sitemap_needs_update', FALSE);
    $result = _xmlsitemap_create_cache_files();
    if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== $result) {
      variable_set("xmlsitemap_create_cache_result_$id", $result);
    }
  }
  elseif (_xmlsitemap_check_cache_files()) {
    $result = _xmlsitemap_create_cache_files();
    if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== $result) {
      variable_set("xmlsitemap_create_cache_result_$id", $result);
    }
  }
  if (!isset($chunk)) {
    if (($chunks = (integer) $link_count / $chunk_size) != variable_get('xmlsitemap_previous_chunks_count', -1)) {
      variable_set('xmlsitemap_previous_chunks_count', $chunks);
      menu_rebuild();
    }
  }
  if (isset($result) && !$result) {
    drupal_not_found();
    exit();
  }
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  $headers = array("Content-type: text/xml; charset=utf-8");
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      file_transfer("$parent_directory/xsm-$id-$chunk.xml", $headers);
    }
  }
  else {
    file_transfer("$parent_directory/xsm-$id.xml", $headers);
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Batch callback called when the batch operations are completed.
 */
function xmlsitemap_batch_operations_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural($count = count($results), '1 item successfully processed.', '@count items successfully processed.');
    if ($count) {
      $message .= theme('item_list', $results, t('Last items successfully processed:'));
    }
    drupal_set_message($message);
  }
}

/**
 * Return the string used to identify the cache file for the site map content.
 */
function xmlsitemap_cache_id() {
  static $id;
  global $base_url, $language;
  if (!isset($id)) {
    $id = substr(md5($language->language . $base_url), 0, 8);
  }
  return $id;
}

/**
 * Return the array for the cron limit options.
 */
function xmlsitemap_cron_options() {
  return array(
    '400' => t('400'),
    '300' => t('300'),
    '200' => t('200'),
    '150' => t('150'),
    '100' => t('100'),
    '75' => t('75'),
    '50' => t('50'),
    '25' => t('25'),
    '20' => t('20'),
    '15' => t('15'),
    '10' => t('10'),
    '5' => t('5'),
    '-1' => t('0'),
  );
}

/**
 * Delete the cache file used for the site map content, and mark the site map as
 * changed.
 */
function xmlsitemap_delete_cache_files() {
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  if (!is_dir($parent_directory)) {
    return;
  }
  file_scan_directory($parent_directory, 'xsm-.*\.xml', array('.', '..', 'CVS'), 'unlink', FALSE);
  xmlsitemap_flag_sitemap();
  return;
}

/**
 * Mark the site map as changed, and the cache as needing update.
 */
function xmlsitemap_flag_sitemap() {
  if (!variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    variable_set('xmlsitemap_sitemap_is_changed', TRUE);
  }
  if (!variable_get('xmlsitemap_sitemap_needs_update', FALSE)) {
    variable_set('xmlsitemap_sitemap_needs_update', TRUE);
  }
}

/**
 * Return the number of links present in xmlsitemap table.
 */
function xmlsitemap_link_count() {
  static $link_count;
  if (!isset($link_count)) {
    $link_count = db_result(db_query("SELECT COUNT(xsm.loc)". xmlsitemap_sitemap_query()));
  }
  return $link_count;
}

/**
 * Return an array of site map priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_sitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Complete the query used to select rows from the xmlsitemap table.
 */
function xmlsitemap_sitemap_query() {
  global $language;
  $default = language_default();
  $language_query = "AND xsm.language IN ('". $language->language ."', '')";
  switch(variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE)) {
    case LANGUAGE_NEGOTIATION_NONE:
      $language_query = '';
      break;
    case LANGUAGE_NEGOTIATION_PATH_DEFAULT:
    case LANGUAGE_NEGOTIATION_PATH:
      if (variable_get('xmlsitemap_all_links_to_default_language', 0) && $language->language == $default->language) {
        $language_query = '';
      }
      break;
  }
  return "
    FROM {xmlsitemap} xsm
    INNER JOIN {system} s ON s.name = xsm.module
    WHERE s.type = 'module'
      AND s.status = 1
      AND xsm.changefreq <> 0
      AND xsm.changed <> 0
      $language_query
      AND (xsm.priority >= 0 AND xsm.priority <= 1)
    ";
}

/**
 * Return an array used to add additional form fields in the user form.
 */
function xmlsitemap_user_form_fieldset() {
  static $done = FALSE;
  $form = array();
  if (!$done) {
    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#title' => t('XML site map'),
      '#collapsible' => TRUE,
      '#access' => user_access('override profile settings') || user_access('administer users'),
      '#weight' => 7,
    );
    $done = TRUE;
  }
  return $form;
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Function used to determinate if the current user has logged in, and can
 * view the site map content (only the anonymous user is enabled).
 */
function _xmlsitemap_anonymous_access() {
  global $user;
  return $user->uid == 0;
}

/**
 * Check the cache files.
 * @return
 *   TRUE if the cache files must be updated / created, FALSE otherwise.
 */
function _xmlsitemap_check_cache_files() {
  $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
  $link_count = xmlsitemap_link_count();
  $id = xmlsitemap_cache_id();
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  // If the directory that should contains the cache files doesn't exist, then
  // the cache files must be created.
  if (!is_dir($parent_directory)) {
    return TRUE;
  }
  $update_timestamp = variable_get('xmlsitemap_update_timestamp', XMLSITEMAP_TIME);
  // If the cache files creation has failed last time, the cache files must be
  // created.
  if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== TRUE) {
    return TRUE;
  }
  // If the main cache file doesn't exist, then the cache files must be
  // created.
  if (!file_exists($parent_directory ."/xsm-$id.xml")) {
    return TRUE;
  }
  // If the main cache file has been created before the site map content has
  // been updated, then the cache files must be updated.
  if (filemtime($parent_directory ."/xsm-$id.xml") < $update_timestamp) {
    return TRUE;
  }
  // Check also the other cache files.
  if ($link_count > $chunk_size) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      if (!file_exists($parent_directory ."/xsm-$id-$chunk.xml")) {
        return TRUE;
      }
      if (filemtime($parent_directory ."/xsm-$id-$chunk.xml") < $update_timestamp) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Create a site map chunk cache file.
 * @param $fp
 *  A file resource used to write in.
 * @param $chunk_size
 *  The number of links the chunk must cointain.
 * @param $chunk
 *  The progressive number associated with the site map chunk (starting from
 *  0).
 */
function _xmlsitemap_create_cache_chunk($fp, $chunk_size, $chunk = 0) {
  fwrite($fp, '<?xml version="1.0" encoding="UTF-8"?>'."\n");
  fwrite($fp, '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n");
  fwrite($fp, '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n");
  fwrite($fp, '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n");
  fwrite($fp, '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n");
  $start = $chunk * $chunk_size;
  $links = db_query_range("SELECT xsm.loc, xsm.module, xsm.type, xsm.id, xsm.sid, xsm.changed, xsm.changefreq, xsm.priority". xmlsitemap_sitemap_query() ."ORDER BY xsm.priority DESC, xsm.changed DESC, xsm.changefreq, xsm.loc", $start, $chunk_size);
  while ($link = db_fetch_object($links)) {
    if ($link->type == 'frontpage') {
      $url = url(NULL, array('absolute' => TRUE));
    }
    elseif ($link->module && function_exists($link->module .'_xmlsitemap_url')) {
      $function = $link->module .'_xmlsitemap_url';
      $url = $function($link->loc, $link->type, $link->id, $link->sid);
    }
    else {
      $url = url($link->loc, array('absolute' => TRUE));
    }
    $link->url = $url;
    if ($link->module && function_exists($link->module .'_xmlsitemap_link_status')) {
      $function = $link->module .'_xmlsitemap_link_status';
      $link->status = $function($link->type, $link->id, $link->sid);
    }
    else {
      $link->status = 0;
    }
    drupal_alter('xmlsitemap_data', $link);
    if (($link->status & XMLSITEMAP_LINK_DISABLED) != XMLSITEMAP_LINK_DISABLED) {
      fwrite($fp, '  <url>'."\n");
      fwrite($fp, '    <loc>'. check_url($link->url) .'</loc>'."\n");
      fwrite($fp, '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link->changed) .'</lastmod>'."\n");
      fwrite($fp, '    <changefreq>'. xmlsitemap_sitemap_frequency($link->changefreq) .'</changefreq>'."\n");
      fwrite($fp, '    <priority>'. number_format($link->priority, 1) .'</priority>'."\n");
      fwrite($fp, '  </url>'."\n");
    }
  }
  fwrite($fp, '</urlset>');
}

/**
 * Create the cache files containing the site map.
 * @return
 *  TRUE if the operation has been successfull, FALSE otherwise.
 */
function _xmlsitemap_create_cache_files() {
  $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
  $link_count = xmlsitemap_link_count();
  $id = xmlsitemap_cache_id();
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  // If the directory doesn't exist, then create it.
  if (!is_dir($parent_directory)) {
    if (@mkdir($parent_directory)) {
      @chmod($parent_directory, 0775);
    }
    else {
      watchdog('xmlsitemap', 'Could not create the cache files directory (@directory)', array('@directory' => $parent_directory), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  if ($link_count > $chunk_size) {
    if (!$fp = fopen($parent_directory ."/xsm-$id.xml", 'wb')) {
      watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id.xml"), WATCHDOG_ERROR);
      return FALSE;
    }
    fwrite($fp, '<?xml version="1.0" encoding="UTF-8"?>'."\n");
    fwrite($fp, '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n");
    fwrite($fp, '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n");
    fwrite($fp, '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n");
    fwrite($fp, '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n");
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      fwrite($fp, '  <sitemap>'."\n");
      fwrite($fp, '    <loc>'. url("sitemap$chunk.xml", array('absolute' => TRUE)) .'</loc>'."\n");
      $from = $chunk * $chunk_size;
      $changed = db_result(db_query_range("SELECT xsm.changed". xmlsitemap_sitemap_query() ."ORDER BY xsm.priority DESC, xsm.changed DESC", $from, $chunk_size));
      fwrite($fp, '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $changed) .'</lastmod>'."\n");
      fwrite($fp, '  </sitemap>'."\n");
    }
    fwrite($fp, '</sitemapindex>');
    fclose($fp);
    // Set standard file permissions for webserver-generated files.
    @chmod($parent_directory ."/xsm-$id.xml", 0664);
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      if (!$fp = fopen($parent_directory ."/xsm-$id-$chunk.xml", 'wb')) {
        watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id-$chunk.xml"), WATCHDOG_ERROR);
        return FALSE;
      }
      _xmlsitemap_create_cache_chunk($fp, $chunk_size, $chunk);
      fclose($fp);
      // Set standard file permissions for webserver-generated files.
      @chmod($parent_directory ."/xsm-$id-$chunk.xml", 0664);
    }
  }
  else {
    if (!$fp = fopen($parent_directory ."/xsm-$id.xml", 'wb')) {
      watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id.xml"), WATCHDOG_ERROR);
      return FALSE;
    }
    _xmlsitemap_create_cache_chunk($fp, $chunk_size);
    fclose($fp);
    // Set standard file permissions for webserver-generated files.
    @chmod($parent_directory ."/xsm-$id.xml", 0664);
  }
  return TRUE;
}

/**
 * Return the revision number as extracted from the CVS revision tag.
 */
function _xmlsitemap_revision() {
  return preg_replace('/\$Rev[iI]sion:\s+(.*)\s+\$/iU', '$1', '$Revision$');
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
