<?php
// $Id$

/**
 * @file
 * Define actions for Google, Yahoo!, Ask, and Windows Live.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_engines_cron() {
  if (!variable_get('site_offline', 0) && variable_get('xmlsitemap_engines_cron_submit_frequency', 3600) > 0 && variable_get('xmlsitemap_ping_sitemap', FALSE)) {
    if ((REQUEST_TIME - variable_get('xmlsitemap_engines_cron_timestamp_submit', REQUEST_TIME)) >= variable_get('xmlsitemap_engines_cron_submit_frequency', 3600)) {
      xmlsitemap_engines_ping_sitemap(NULL, TRUE);
      variable_set('xmlsitemap_ping_sitemap', FALSE);
      variable_set('xmlsitemap_engines_cron_timestamp_submit', REQUEST_TIME);
    }
  }
}

/**
 * Implementation of hook_init().
 */
function xmlsitemap_engines_init() {
  if (!variable_get('site_offline', 0) && arg(0) != 'batch' && variable_get('xmlsitemap_engines_submit', FALSE) && variable_get('xmlsitemap_ping_sitemap', FALSE)) {
    xmlsitemap_engines_ping_sitemap(NULL, TRUE);
    variable_set('xmlsitemap_ping_sitemap', FALSE);
  }
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_engines_menu() {
  $items = array();
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML sitemap to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_engines_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap_engines.admin.inc',
  );
  if ($verify = variable_get("xmlsitemap_engines_google_verify", '')) {
    $items[$verify] = array(
      'title' => 'Google verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('google'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  if ($verify = variable_get("xmlsitemap_engines_yahoo_verify", '')) {
    $items[$verify] = array(
      'title' => 'Yahoo! verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('yahoo'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  if ($verify = variable_get("xmlsitemap_engines_live_verify", '')) {
    $items[$verify] = array(
      'title' => 'Windows Live verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('live'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  return $items;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function xmlsitemap_engines_form_xmlsitemap_tools_settings_alter(&$form, &$from_state) {
  $options = array(
    'ask' => t('Ask.com'),
    'google' => t('Google'),
    'moreover' => t('Moreover.com'),
    'live' => t('Microsoft Live'),
    'yahoo' => t('Yahoo!'),
  );
  foreach ($options as $id => $title) {
    if (!variable_get("xmlsitemap_engines_{$id}_submit", FALSE)) {
      unset($options[$id]);
    }
  }
  $form['submit_to_search_engines'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submit to search engines'),
    '#collapsible' => TRUE,
  );
  if (count($options)) {
    $form['submit_to_search_engines']['xmlsitemap_engine_parameter_search_engines'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Search engines'), 
      '#default_value' => variable_get('xmlsitemap_engine_parameter_search_engines', array()),
      '#options' => $options,
      '#checkall' => count($options) > 1 ? TRUE : FALSE,
    );
  }
  else {
    $form['submit_to_search_engines']['message'] = array(
      '#value' => t('None of the supported search engines has been enabled. You can enable them in the <a href="@search_engines">search engines</a> settings page.', array('@search_engines' => url('admin/settings/xmlsitemap/engines'))),
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );
  }
  xmlsitemap_tools_settings_form($form);
}

/**
 * Implementation of hook_xmlsitemap_operations().
 */
function xmlsitemap_engines_xmlsitemap_operations() {
  return array(
    'submit_to_search_engines' => array(
      'label' => t('Submit the sitemap to the search engines'),
      'callback' => '_xmlsitemap_engines_operation_ping_sitemap',
    ),
  );
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Submit the sitemap to the selected engines.
 * @param $engines
 *   An array of search engine identifiers.
 * @param $all
 *   If $engines is an empty array, and $all is TRUE, the sitemap will be
 *   submitted to all the enabled search engines.
 */
function xmlsitemap_engines_ping_sitemap($engines = array(), $all = FALSE) {
  if (empty($engines) && $all) {
    $engines = array('ask', 'google', 'moreover', 'live', 'yahoo');
  }
  if (!empty($engines)) {
    foreach (_xmlsitemap_engines_get_engines_data() as $id => $info) {
      if (in_array($id, $engines) && variable_get("xmlsitemap_engines_{$id}_submit", FALSE)) {
        $url = strtr(
          variable_get("xmlsitemap_engines_{$id}_url", $info[1]),
          array('[sitemap]' => url('sitemap.xml', array('absolute' => TRUE)))
        );
        $result = drupal_http_request($url);
        if ($result->code == 200) {
          watchdog('xmlsitemap', 'The sitemap has been successfully submitted to %engine.', array('%engine' => $info[0]));
        }
        else {
          watchdog('xmlsitemap', 'An error occurred while submitting the sitemap to %engine: !code.',
            array('%engine' => $info[0], '!code' => 0 + $result->code), WATCHDOG_ERROR
          );
        }
      }
    }
  }
}

/*****************************************************************************
 * Private functions - sitemap operations.
 ****************************************************************************/

function _xmlsitemap_engines_operation_ping_sitemap() {
  xmlsitemap_engines_ping_sitemap(
    array_filter(
      variable_get('xmlsitemap_engine_parameter_search_engines', array())
    )
  );
  drupal_set_message(t('The sitemap has been submitted to the search engines.'), 'status', FALSE);
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

function _xmlsitemap_engines_get_engines_data() {
  return array(
    'ask' => array(
      'Ask.com',
      'http://submissions.ask.com/ping?sitemap=[sitemap]',
    ),
    'google' => array(
      'Google',
      'http://www.google.com/webmasters/tools/ping?sitemap=[sitemap]',
    ),
    'moreover' => array(
      'Moreover.com',
      'http://api.moreover.com/ping?u=[sitemap]',
    ),
    'live' => array(
      'Windows Live',
      'http://webmaster.live.com/ping.aspx?siteMap=[sitemap]',
    ),
    'yahoo' => array(
      'Yahoo!',
      'http://search.yahooapis.com/SiteExplorerService/V1/ping?sitemap=[sitemap]',
    ),
  );
}

/**
 * @} End of "addtogroup xmlsitemap".
 */

