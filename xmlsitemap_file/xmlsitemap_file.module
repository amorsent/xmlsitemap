<?php
// $Id$

/**
 * @file
 * Adds node file attachments to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_file_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'system_file_system_settings') {
    $form['#submit'][] = 'xmlsitemap_update_sitemap';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_file_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (is_array($node->files)) {
    switch ($op) {
      case 'update':
        foreach ($node->files as $fid => $file) {
          if (!$file['remove'] && $file['list']) {
            $result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_file} WHERE fid = %d AND nid = %d",
              array($fid, $node->nid)
            ));
            if ($result !== FALSE) {
              $row = $result;
              if (($changed = filemtime($file['filepath'])) > $row->changed) {
                $row->previously_changed = $row->changed;
                $row->changed = $changed;
              }
            }
            else {
              $row = new stdClass();
              $row->fid = $fid;
              $row->nid = $node->nid;
              $row->changed = filemtime($file['filepath']);
            }
            drupal_write_record('xmlsitemap_file', $row, $result !== FALSE ? 'fid' : NULL);
          }
        }
      case 'insert':
        $row = new stdClass();
        foreach ($node->files as $fid => $file) {
          if (!$file['remove'] && $file['list']) {
            $row->fid = $fid;
            $row->nid = $node->nid;
            $row->changed = filemtime($file['filepath']);
            drupal_write_record('xmlsitemap_file', $row);
          }
        }
        break;
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_file} WHERE nid = %d", $node->nid);
        foreach ($node->files as $file) {
          if ($file['list']) {
            xmlsitemap_update_sitemap();
            break;
          }
        }
        break;
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_file_xmlsitemap_links() {
  $result = db_query(db_rewrite_sql("SELECT n.nid, n.type, n.promote, f.fid, f.filepath, s.comment_count, xn.priority_override, xf.changed, xf.previously_changed
    FROM {node} n
    INNER JOIN {xmlsitemap_file} xf ON n.nid = xf.nid
    LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid
    LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
    LEFT JOIN {files} f ON f.fid = xf.fid
    LEFT JOIN {upload} u ON u.vid = n.vid
    WHERE n.status > 0
    AND xn.priority_override <> -1.0
    AND u.list = 1")
  );
  $row = new stdClass();
  $row->module = 'xmlsitemap_file';
  $row->type = 'attachment';
  while ($file = db_fetch_object($result)) {
    $access = array();
    if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
      $access = module_invoke_all('file_download', $file->filepath);
    }
    if (!in_array(-1, $access)) {
      $row->loc = $file->filepath;
      $row->id = $file->nid;
      $row->sid = $file->fid;
      $row->lastmod = filemtime($file->filepath);
      $row->changefreq = max(time() - $file->changed, empty($file->previously_changed) ? 0 : $file->changed - $file->previously_changed);
      $row->priority = 0.5;
      if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
        drupal_write_record('xmlsitemap', $row);
      }
    }
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Return the absolute URL of the link added.
 */
function xmlsitemap_file_url($loc, $type) {
  return file_create_url($loc);
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
