<?php
// $Id$

/**
 * Implements hook_xmlsitemap_link_info().
 */
function xmlsitemap_menu_xmlsitemap_link_info() {
  $types['menu'] = array(
    'label' => t('Menu'),
    'bundle label' => t('Menu title'),
    'base table' => 'menu_links',
    'object keys' => array(
      'id' => 'mlid',
      'bundle' => 'menu_name',
    ),
    'path callback' => 'xmlsitemap_menu_path',
    'xmlsitemap' => array(
      'process callback' => 'xmlsitemap_menu_xmlsitemap_process_menu_links',
    ),
  );
  foreach (menu_get_menus() as $menu => $name) {
    $types['menu']['bundles'][$menu] = array(
      'label' => $name,
      'admin' => array(
        'real path' => 'admin/build/menu-customize/' . $menu . '/edit',
        'access arguments' => array('administer menu'),
      ),
      'xmlsitemap' => array(
        'priority' => variable_get('xmlsitemap_menu_priority_' . $menu, 0.5),
        'status' => variable_get('xmlsitemap_menu_status_' . $menu, 0),
      ),
    );
  }
  return $types;
}

function xmlsitemap_menu_path($menu_item) {
  return $menu_item['link_path'];
}

/**
 * Implements hook_cron().
 *
 * Process old menu links not found in the {xmlsitemap} table.
 */
function xmlsitemap_menu_cron() {
  xmlsitemap_menu_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_menu_xmlsitemap_index_links($limit) {
  if ($menus = xmlsitemap_get_link_type_enabled_bundles('menu')) {
    $sql = "SELECT ml.mlid FROM {menu_links} ml LEFT JOIN {xmlsitemap} x ON x.type = 'menu' AND ml.mlid = x.id WHERE x.id IS NULL AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ") ORDER BY ml.mlid DESC";
    $query = db_query_range($sql, $menus, 0, $limit);
    $mlids = array();
    while ($mlid = db_result($query)) {
      $mlids[] = $mlid;
    }
    xmlsitemap_menu_xmlsitemap_process_menu_links($mlids);
  }
}

/**
 * Process menu sitemap links.
 *
 * @param $tids
 *   An array of menu link IDs.
 */
function xmlsitemap_menu_xmlsitemap_process_menu_links(array $mlids) {
  // Set the global user variable to the anonymous user.
  xmlsitemap_switch_user(0);

  foreach ($mlids as $mlid) {
    $menu_item = menu_link_load($mlid);
    $link = xmlsitemap_menu_create_link($menu_item);
    xmlsitemap_save_link($link);
  }

  // Set the global user variable back to the original user.
  xmlsitemap_restore_user();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see menu_edit_menu()
 * @see xmlsitemap_menu_menu_edit_menu_submit()
 */
function xmlsitemap_menu_form_menu_edit_menu_alter(&$form, $form_state) {
  $menu = isset($form['menu_name']['#value']) ? $form['menu_name']['#value'] : '';

  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  $options = array(
    'status' => variable_get('xmlsitemap_menu_status_' . $menu, 0),
    'priority' => variable_get('xmlsitemap_menu_priority_' . $menu, 0.5),
  );
  xmlsitemap_add_form_type_options($form, 'menu', $options);

  // @todo Enable this feature:
  //$form['xmlsitemap']['xmlsitemap_menu_calculate_priority'] = array(
  //  '#type' => 'checkbox',
  //  '#title' => t('Calculate priority based on menu item depth and weight.'),
  //  '#default_value' => variable_get('xmlsitemap_menu_calculate_priority_' . $menu, FALSE),
  //);

  $form['submit'] += array('#weight' => 50);
  if (isset($form['delete'])) {
    $form['delete'] += array('#weight' => 51);
  }

  $form['#submit'][] = 'xmlsitemap_menu_menu_edit_menu_submit';
}

/**
 * Form submit handler; update settings when a menu is saved.
 */
function xmlsitemap_menu_menu_edit_menu_submit($form, $form_state) {
  $menu = $form_state['values']['menu_name'];
  $new_priority = $form_state['values']['xmlsitemap_menu_priority'];
  $new_status = $form_state['values']['xmlsitemap_menu_status'];

  if ($new_status != variable_get('xmlsitemap_menu_status_' . $menu, 0)) {
    xmlsitemap_update_links(array('status' => $new_status), array('type' => 'menu', 'subtype' => $menu, 'status_override' => 0));
  }
  if ($new_priority != variable_get('xmlsitemap_menu_priority_' . $menu, 0.5)) {
    xmlsitemap_update_links(array('priority' => $new_priority), array('type' => 'menu', 'subtype' => $menu, 'priority_override' => 0));
  }

  variable_set('xmlsitemap_menu_priority_' . $menu, $new_priority);
  variable_set('xmlsitemap_menu_status_' . $menu, $new_status);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see menu_delete_menu_confirm()
 * @see xmlsitemap_menu_form_menu_delete_menu_confirm_submit()
 */
function xmlsitemap_menu_form_menu_delete_menu_confirm_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_form_menu_delete_menu_confirm_submit';
}

/**
 * Form submit handler; delete sitemap links when a menu is deleted.
 */
function xmlsitemap_menu_form_menu_delete_menu_confirm_submit($form, $form_state) {
  $menu = $form['#menu']['menu_name'];
  xmlsitemap_link_delete_multiple(array('type' => 'menu', 'subtype' => $menu));
  variable_del('xmlsitemap_menu_status_' . $menu);
  variable_del('xmlsitemap_menu_priority_ ' . $menu);
}

//function xmlsitemap_menu_form_menu_overview_form_alter(&$form, $form_state) {
//  $form['#submit'][] = 'xmlsitemap_menu_menu_overview_form_submit';
//}
//
//function xmlsitemap_menu_menu_overview_form_submit($form, $form_state) {
//  foreach (element_children($form) as $mlid) {
//    if (isset($form[$mlid]['#item'])) {
//      $menu_item = menu_link_load($form[$mlid]['#item']['mlid'], TRUE);
//      xmlsitemap_menu_item_update($menu_item);
//    }
//  }
//}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see menu_item_delete_form()
 */
function xmlsitemap_menu_form_menu_item_delete_form_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_menu_item_delete_form_submit';
}

/**
 * Form submit callback; delete the sitemap link when a menu item is deleted.
 */
function xmlsitemap_menu_menu_item_delete_form_submit($form, $form_state) {
  xmlsitemap_menu_item_delete($form['#item']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see menu_edit_item()
 */
function xmlsitemap_menu_form_menu_edit_item_alter(&$form, $form_state) {
  $form['#submit'][] = 'xmlsitemap_menu_menu_edit_item_submit';
}

/**
 * Form submit callback; update the sitemap link when a menu item is updated.
 */
function xmlsitemap_menu_menu_edit_item_submit($form, $form_state) {
  xmlsitemap_switch_user(0);
  $menu_item = menu_link_load($form_state['values']['menu']['mlid']);
  xmlsitemap_restore_user();
  xmlsitemap_menu_item_update($menu_item);
}

function xmlsitemap_menu_item_update(array $menu_item) {
  $link = xmlsitemap_menu_create_link($menu_item);
  xmlsitemap_save_link($link);
}

function xmlsitemap_menu_item_delete(array $menu_item) {
  xmlsitemap_link_delete('menu', $menu_item['mlid']);
}

/**
 * Create a sitemap link from a menu item.
 *
 * @param $menu_item
 *   A loaded menu item.
 */
function xmlsitemap_menu_create_link(array $menu_item) {
  if (!isset($menu_item['xmlsitemap'])) {
    $menu_item['xmlsitemap'] = array();
    if ($menu_item['mlid'] && $link = xmlsitemap_link_load('menu', $menu_item['mlid'])) {
      $menu_item['xmlsitemap'] = $link;
    }
  }

  $menu_item['xmlsitemap'] += array(
    'type' => 'menu',
    'id' => $menu_item['mlid'],
    'loc' => $menu_item['link_path'],
    'status' => variable_get('xmlsitemap_menu_status_' . $menu_item['menu_name'], 0),
    'status_default' => variable_get('xmlsitemap_menu_status_' . $menu_item['menu_name'], 0),
    'status_override' => 0,
    'priority' => variable_get('xmlsitemap_menu_priority_' . $menu_item['menu_name'], 0.5),
    'priority_default' => variable_get('xmlsitemap_menu_priority_' . $menu_item['menu_name'], 0.5),
    'priority_override' => 0,
  );

  // The following values must always be checked because they are volatile.
  $menu_item['xmlsitemap']['subtype'] = $menu_item['menu_name'];
  $menu_item['xmlsitemap']['access'] = $menu_item['access'] && !$menu_item['external'] && !$menu_item['hidden'];
  $menu_item['xmlsitemap']['language'] = isset($menu_item['options']['langcode']) ? $menu_item['options']['langcode'] : '';

  return $menu_item['xmlsitemap'];
}

/**
 * Calculate the priority of a menu link based on depth and weight.
 */
function xmlsitemap_menu_calculate_priority(array $menu_item) {
  $priority = (MENU_MAX_DEPTH - $menu_item['depth'] + 1) / MENU_MAX_DEPTH;
  $priority -= (50 + $menu_item['weight']) / (100 * (MENU_MAX_DEPTH + 1));
  return $priority;
}

/**
 * Internal default variables for template_var().
 */
function xmlsitemap_menu_variables() {
  $defaults = array(
    // Deprecated variables set to NULL so they are still removed on uninstall.
    'xmlsitemap_menu_menus' => NULL,
    'xmlsitemap_menu_calculate_priority' => NULL,
  );
  $menus = array_keys(menu_get_menus());
  foreach ($menus as $menu) {
    $defaults['xmlsitemap_menu_status_' . $menu] = 0;
    $defaults['xmlsitemap_menu_priority_' . $menu] = 0.5;
    $defaults['xmlsitemap_menu_calculate_priority_' . $menu] = FALSE;
  }
  return $defaults;
}
