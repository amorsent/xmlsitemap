<?php 
// $Id$

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (variable_get('xmlsitemap_cron_submit', FALSE) && variable_get('xmlsitemap_changed', FALSE)) {
    _xmlsitemap_ping();
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  if (_xmlsitemap_submit_on_exit()) {
    _xmlsitemap_ping();
  }
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
    $link_count = _xmlsitemap_link_count();
    if ($link_count / $chunk_size > 1) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
    if (isset($items[arg(0)]) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      $message = array_shift(module_invoke_all('xmlsitemap_engines', 'access'));
      if (!isset($message)) {
        $message = 'Sitemap downloaded by @user-agent at @address.';
      }
      watchdog('xmlsitemap', $message,
        array(
          '@user-agent' => $_SERVER['HTTP_USER_AGENT'],
          '@address' => $_SERVER['REMOTE_ADDR'],
        )
      );
    }
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
      $output = t('Configure the XML site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/settings/xmlsitemap/tools':
      $output = t('Update the XML Sitemap database tables.');
      break;
    case 'admin/settings/xmlsitemap/tools/debug':
      $output = t('Show some data useful in the debugging, or in the issue reports.');
      $output .= '<br />'. t('At the moment the page is empty, but it will be populated with data helpful to understand the possible cause of an issue.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description'; 
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer xml site map');
  $access_content = array('access content');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the XML site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_sitemap'),
    'access arguments' => $access_config,
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Site map',
    'description' => 'Configure the XML site map.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML site map to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_engines'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/tools'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => 'xmlsitemap_tools_update_database',
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/tools/update'] = array(
    'title' => 'Database update',
    'description' => 'Update the XML Sitemap database tables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => 'xmlsitemap_tools_update_database',
    'access arguments' => $access_config,
    'weight' => -2,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/tools/debug'] = array(
    'title' => 'Debug',
    'description' => 'Show some data useful in the debugging, or in the issue reports.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools_debug'),
    'access arguments' => $access_config,
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['sitemap.xml'] = array(
    'title' => 'Site map index',
    'page callback' => 'xmlsitemap_output',
    'access arguments' => $access_content,
    'type' => MENU_CALLBACK,
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if ($link_count / $chunk_size > 1) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Site map !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access arguments' => $access_content,
        'type' => MENU_CALLBACK,
      );
    }
  }
  return $items;
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Menu callback; display the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map is being requested.
 *  If not set and there is more than one chunk, display the site map index.
 */
function xmlsitemap_output($chunk = NULL) {
  drupal_set_header('Content-type: text/xml; charset=utf-8');
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      _xmlsitemap_output_chunk($chunk);
    }
    else {
      drupal_not_found();
    }
  }
  else {
    if ($link_count > $chunk_size) {
      print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
      print '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
      print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
      print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
      print '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n";
      $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
      $link_count = _xmlsitemap_link_count();
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        print '  <sitemap>'."\n";
        print '    <loc>'. url("sitemap$chunk.xml", array('absolute' => TRUE)) .'</loc>'."\n";
        if ($chunk < $link_count / $chunk_size) {
          $from = $chunk * $chunk_size;
          if (!empty($chunk_size)) {
            // Select only the links added by enabled modules. 
            $lastmod = db_result(db_query_range("SELECT lastmod FROM {xmlsitemap} xsm
              INNER JOIN {system} sm ON sm.name = xsm.module
              WHERE sm.type = 'module'
                AND sm.status = 1
              ORDER BY lastmod DESC, loc",
              $from, $chunk_size)
            );
            if ($lastmod !== FALSE) {
              print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $lastmod) .'</lastmod>'."\n";
            }
          }
        }
        print '  </sitemap>'."\n";
      }
      print '</sitemapindex>';
    }
    else {
      _xmlsitemap_output_chunk();
    }
  }
  drupal_page_footer();
  exit;
}

/**
 * Menu callback; return the search engine settings form.
 */
function xmlsitemap_settings_engines() {
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
    '#collapsible' => TRUE,
  );
  $form['submission']['xmlsitemap_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map when updated'),
    '#default_value' => variable_get('xmlsitemap_submit', FALSE),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time it is updated.'),
  );
  $form['submission']['xmlsitemap_cron_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map on cron run'),
    '#default_value' => variable_get('xmlsitemap_cron_submit', FALSE),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time cron is run.'),
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
  );
  drupal_alter('xmlsitemap_engine_settings', $form);
  $form = system_settings_form($form);
  return $form;
}

/**
 * Menu callback; return the site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
  );
  $form['general']['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 200),
    '#size' => 10,
    '#maxlength' => 5,
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
    '#weight' => -1,
  );
  $form['general']['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_priority_options(),
    '#description' => t('This is the absolute priority for the front page.'),
    '#weight' => -1,
  );
  drupal_alter('xmlsitemap_sitemap_settings', $form);
  $form = system_settings_form($form);
  $form['#submit'][] = 'xmlsitemap_settings_sitemap_submit';
  $form['#validate'][] = 'xmlsitemap_settings_sitemap_validate';
  return $form;
}

/**
 * Validate the site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form, &$form_state) {
  if ($form_state['values']['xmlsitemap_chunk_size'] <= 0 || $form_state['values']['xmlsitemap_chunk_size'] > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('The number of links in a site map chunk must be a number between 1, and 50,000.'));
  }
}

/**
 * Submission function for the site map settings form.
 */
function xmlsitemap_settings_sitemap_submit($form, &$form_state) {
  if (($chunk_size = $form_state['values']['xmlsitemap_chunk_size']) != variable_get('xmlsitemap_previous_chunk_size', -1)) {
    menu_rebuild();
    variable_set('xmlsitemap_previous_chunk_size', $chunk_size);
  }
}

/**
 * Form builder; return the database update form.
 */
function xmlsitemap_tools_update_database($form_state = NULL) {
  $form = array();
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
  switch ($step) {
    case 1:
      $title = t('First step');
      $hook = 'xmlsitemap_update_module_tables_batch_operations';
      break;
    case 2:
      $title = t('Second step');
      $hook = 'xmlsitemap_update_main_table_batch_operations';
      break;
  }
  if (isset($hook)) {
    foreach (module_implements($hook) as $module) {
      $modules[] = $module;
      $modules_list[] = $module .'.module';
    }
    if (!empty($modules)) {
      $form['#modules'] = $modules;
    }
    $form['title'] = array(
      '#prefix' => '<h3>',
      '#suffix' => '</h3>',
      '#value' => $title,
    );
    if (empty($modules)) {
      $modules_list[] = t('No modules implement the required code for this database update step');
    }
    $form['list'] = array(
      '#prefix' => '<div>',
      '#suffix' => '</div>',
      '#value' => theme('item_list', $modules_list),
    );
  }
  if ($step < 3) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
    );
  }
  return $form;
}

/**
 * Submission function for the database update form.
 */
function xmlsitemap_tools_update_database_submit($form, &$form_state) {
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
  switch ($step) {
    case 1:
      $hook = '_xmlsitemap_update_module_tables_batch_operations';
      break;
    case 2:
      $hook = '_xmlsitemap_update_main_table_batch_operations';
      break;
  }
  if (isset($form['#modules']) && isset($hook)) {
    foreach ($form['#modules']) as $module) {
      $function = $module . $hook;
      if (function_exists($function)) {
        $result = $function();
        if (isset($result)) {
          if (is_array($result)) {
            foreach ($result as $operation) {
              $batch['operations'][] = array($operation, array());
            }
          }
          elseif (is_string($result)) {
            $batch['operations'][] = array($result, array());
          }
        }
      }
    }
  }
  if (isset($batch)) {
    $batch['title'] = t('Updating database');
    $batch['finished'] = 'xmlsitemap_database_update_finished';
    batch_set($batch);
  }
  $form_state['storage']['step'] = $step + 1;
}

/**
 * Menu callback; return the debug form.
 */
function xmlsitemap_tools_debug() {
  return array();
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Add the XML site map settings fieldset to the form.
 * @param $form
 *  The form to change.
 * @param settings
 *  An array of optional settings.
 *   - disabled: TRUE if some of the fields added to the fieldsets are disabled;
 *   - weight: the weight of the fieldset;
 *   - buttons: an array of strings which identify the form items that will have
 *     their weight increased of of 1. 
 */
function xmlsitemap_add_settings_fieldset(&$form, $settings = array()) {
  if (!isset($form['xmlsitemap'])) {
    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#title' => t('XML site map'),
      '#collapsible' => TRUE,
    );
  }
  if (!empty($settings['disabled']) && !isset($form['xmlsitemap']['#description'])) {
    $form['xmlsitemap']['#description'] = t('The disabled options are only modifiable from users with the right permission');
  }
  if (isset($settings['weight'])) {
    if ((isset($form['xmlsitemap']['#weight']) && $settings['weight'] > $form['xmlsitemap']['#weight']) || !isset($form['xmlsitemap']['#weight'])) {
      $form['xmlsitemap']['#weight'] = $settings['weight'];
    }
  }
  if (!empty($settings['buttons'])) {
    foreach ($settings['buttons'] as $button) {
      if (isset($form[$button])) {
        $form[$button]['#weight'] = isset($form[$button]['#weight']) ? $form[$button]['#weight'] + 1 : 1;
      }
    }
  }
}

/**
 * Function called when the database batch is finished.
 * @param $success
 *  TRUE if the batch operation has been concluded sucessfully, FALSE otherwise.
 * @param $results
 *  The values returned from the batch function(s).
 * @param $operations
 *  The array of operations that remained unprocessed.
 */
function xmlsitemap_database_update_finished($success, $results, $operations) {
  if ($success) {
    if (!empty($results['added'])) {
      drupal_set_message(
        format_plural($results['added'], 'Added 1 row.', 'Added @count rows.')
      );
    }
    if (!empty($results['deleted'])) {
      drupal_set_message(
        format_plural($results['deleted'], 'Deleted 1 row.', 'Deleted @count rows.')
      );
    }
    if (!empty($results['updated'])) {
      drupal_set_message(
        format_plural($results['updated'], 'Updated 1 row.', 'Updated @count rows.')
      );
    }
  }
  else {
    drupal_set_message(t("An error occured, and the database update processing didn't complete."));
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Get an array of site map priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Return the number of links present in xmlsitemap table.
 */
function _xmlsitemap_link_count() {
  // Count only the links added by enabled modules.
  return db_result(db_query("SELECT COUNT(*)
    FROM {xmlsitemap} xsm
    INNER JOIN {system} sm ON sm.name = xsm.module
    WHERE sm.type = 'module'
      AND sm.status = 1")
  );
}

/**
 * Display a chunk of the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map to display.
 */
function _xmlsitemap_output_chunk($chunk = 0) {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $start = $chunk * $chunk_size;
  // Select only the links added by enabled modules.
  $links = db_query_range("SELECT * FROM {xmlsitemap} xsm
    INNER JOIN {system} sm ON sm.name = xsm.module
    WHERE sm.type = 'module'
      AND sm.status = 1
    ORDER BY lastmod DESC, changefreq, priority DESC, loc",
    $start , $chunk_size
  );
  while ($link = db_fetch_object($links)) {
    if ($link->module && function_exists($link->module .'_url')) {
      $function = $link->module .'_url';
      $url = $function($link->loc, $link->type);
    }
    else {
      $url = url($link->loc, array('absolute' => TRUE));
    }
    print '  <url>'."\n";
    print '    <loc>'. check_url($url) .'</loc>'."\n";
    if ($link->lastmod != 0) {
      print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link->lastmod) .'</lastmod>'."\n";
    }
    if ($link->changefreq != 0) {
      print '    <changefreq>'. xmlsitemap_frequency($link->changefreq) .'</changefreq>'."\n";
    }
    if ($link->priority >= 0 && $link->priority <= 1) {
      print '    <priority>'. number_format($link->priority, 1) .'</priority>'."\n";
    }
    print '  </url>'."\n";
  }
  print '</urlset>';
}

/**
 * Submit the site map to search engines.
 */
function _xmlsitemap_ping() {
  module_invoke_all('xmlsitemap_engines', 'ping');
  variable_set('xmlsitemap_changed', FALSE);
}

/**
 * Schedule a call to _xmlsitemap_ping() to be run on exit. Use this
 * function instead of _xmlsitemap_ping() to avoid a delay in outputting
 * the page to the user.
 * @return
 *  TRUE if the function has been called previously, FALSE otherwise.
 */
function _xmlsitemap_submit_on_exit() {
  static $count = 0;
  return ($count++ <> 0);
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
